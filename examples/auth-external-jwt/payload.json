[{},{"attrs":{"title":"Auth External API (JWT)","description":"Authentication with external API service (jsonwebtoken) example with Nuxt.js","github":"auth-jwt","code":"https://github.com/ahadyekta/nuxt-auth-external-jwt"},"body":"<h1><a id=\"documentation\" class=\"anchor\" aria-hidden=\"true\" href=\"#documentation\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Documentation</h1><p>In auth-routes example both api and nuxt start together and use one Node.js server instance. However, sometimes we should work with external api with jsonWebToken. In this example it will be explained in a simple way.</p>\n<h2><a id=\"official-code-auth-module-code-\" class=\"anchor\" aria-hidden=\"true\" href=\"#official-code-auth-module-code-\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Official <code>auth-module</code></h2><p>If you want to implement complex authentication flows, for example OAuth2, we suggest using the official <a href=\"https://github.com/nuxt-community/auth-module\"><code>auth-module</code></a></p>\n<h2><a id=\"structure\" class=\"anchor\" aria-hidden=\"true\" href=\"#structure\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Structure</h2><p>Since Nuxt.js provides both server and client rendering and the cookie of browser is different from cookie of the Node.js server, we should push token data to some storage that can be accessible in both sides.</p>\n<h3><a id=\"for-server-rendering\" class=\"anchor\" aria-hidden=\"true\" href=\"#for-server-rendering\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>For server rendering</h3><p>We should save the token in session browser cookie after login, then it can be accessed through <code>req.headers.cookie</code> in middleware files, <code>nuxtServerInit</code> function or  wherever you can access the <code>req</code>.</p>\n<h3><a id=\"for-client-rendering\" class=\"anchor\" aria-hidden=\"true\" href=\"#for-client-rendering\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>For client rendering</h3><p>We directly commit token in the store, as long as the page is not closed or reloaded, we have the token.</p>\n<p>First, we install the dependencies:</p>\n<pre><code class=\"hljs bash\">npm install js-cookie --save\nnpm install cookieparser --save</code></pre><h2><a id=\"login-page\" class=\"anchor\" aria-hidden=\"true\" href=\"#login-page\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Login Page</h2><p>Then inside page directory make a <code>login.vue</code> file, and inside the script section, add:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Cookie = process.client ? <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'js-cookie'</span>) : <span class=\"hljs-literal\">undefined</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">middleware</span>: <span class=\"hljs-string\">'notAuthenticated'</span>,\n  <span class=\"hljs-attr\">methods</span>: {\n    postLogin() {\n      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> { <span class=\"hljs-comment\">// we simulate the async request with timeout.</span>\n        <span class=\"hljs-keyword\">const</span> auth = {\n          <span class=\"hljs-attr\">accessToken</span>: <span class=\"hljs-string\">'someStringGotFromApiServiceWithAjax'</span>\n        }\n        <span class=\"hljs-keyword\">this</span>.$store.commit(<span class=\"hljs-string\">'setAuth'</span>, auth) <span class=\"hljs-comment\">// mutating to store for client rendering</span>\n        Cookie.set(<span class=\"hljs-string\">'auth'</span>, auth) <span class=\"hljs-comment\">// saving token in cookie for server rendering</span>\n        <span class=\"hljs-keyword\">this</span>.$router.push(<span class=\"hljs-string\">'/'</span>)\n      }, <span class=\"hljs-number\">1000</span>)\n    }\n  }\n}</code></pre><blockquote>\n<p>Note: we simulate the async request with timeout.</p>\n</blockquote>\n<h2><a id=\"using-the-store\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-the-store\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Using the store</h2><p>After that make <code>index.js</code> in <code>store</code> directory like below :</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex'</span>\n\n<span class=\"hljs-keyword\">const</span> cookieparser = process.server ? <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cookieparser'</span>) : <span class=\"hljs-literal\">undefined</span>\n\n<span class=\"hljs-keyword\">const</span> createStore = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n      <span class=\"hljs-attr\">auth</span>: <span class=\"hljs-literal\">null</span>\n    }),\n    <span class=\"hljs-attr\">mutations</span>: {\n      setAuth(state, auth) {\n        state.auth = auth\n      }\n    },\n    <span class=\"hljs-attr\">actions</span>: {\n      nuxtServerInit({ commit }, { req }) {\n        <span class=\"hljs-keyword\">let</span> auth = <span class=\"hljs-literal\">null</span>\n        <span class=\"hljs-keyword\">if</span> (req.headers.cookie) {\n          <span class=\"hljs-keyword\">const</span> parsed = cookieparser.parse(req.headers.cookie)\n          <span class=\"hljs-keyword\">try</span> {\n            auth = <span class=\"hljs-built_in\">JSON</span>.parse(parsed.auth)\n          } <span class=\"hljs-keyword\">catch</span> (err) {\n            <span class=\"hljs-comment\">// No valid cookie found</span>\n          }\n        }\n        commit(<span class=\"hljs-string\">'setAuth'</span>, auth)\n      }\n    }\n  })\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> createStore</code></pre><blockquote>\n<p>Note: the <code>nuxtServerInit</code> function only runs in every server side rendering. So we use it to mutate the session browser cookie in the store. We can get the session browser cookie by using <code>req.headers.cookie</code> and parse it using <code>cookieparser</code>.</p>\n</blockquote>\n<h2><a id=\"checking-auth-middlewares\" class=\"anchor\" aria-hidden=\"true\" href=\"#checking-auth-middlewares\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>checking auth middlewares</h2><p>We can check the store for havin the accessToken in every page we need to limit access. In middleware directory we make <code>authenticated.js</code> file:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ store, redirect }</span>) </span>{\n  <span class=\"hljs-comment\">// If the user is not authenticated</span>\n  <span class=\"hljs-keyword\">if</span> (!store.state.auth) {\n    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">'/login'</span>)\n  }\n}</code></pre><p>and in middleware directory make <code>notAuthenticated.js</code> file for login page:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ store, redirect }</span>) </span>{\n  <span class=\"hljs-comment\">// If the user is authenticated redirect to home page</span>\n  <span class=\"hljs-keyword\">if</span> (store.state.auth) {\n    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">'/'</span>)\n  }\n}</code></pre><blockquote>\n<p>Note: use <code>authenticated</code> middleware for pages which need authentication and use <code>notAuthenticated</code> middleware inside the login/register and similar pages.</p>\n</blockquote>\n<h2><a id=\"logging-out-the-user\" class=\"anchor\" aria-hidden=\"true\" href=\"#logging-out-the-user\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Logging out the User</h2><p>Finally to allow the user to logout of the system, we can remove the cookie: </p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> Cookie = process.client ? <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'js-cookie'</span>) : <span class=\"hljs-literal\">undefined</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">methods</span>: {\n    logout() {\n      <span class=\"hljs-comment\">// Code will also be required to invalidate the JWT Cookie on external API</span>\n      Cookie.remove(<span class=\"hljs-string\">'auth'</span>)\n      <span class=\"hljs-keyword\">this</span>.$store.commit(<span class=\"hljs-string\">'setAuth'</span>, <span class=\"hljs-literal\">null</span>)\n    }\n  }\n}</code></pre><blockquote>\n<p>Note: refer to the method using @click=&quot;logout&quot;</p>\n</blockquote>\n"}]