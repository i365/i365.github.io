[{},{"attrs":{"title":"Auth Routes","description":"Authenticated routes example with Nuxt.js","github":"auth-routes","livedemo":"https://nuxt-auth-routes.gomix.me","liveedit":"https://gomix.com/#!/project/nuxt-auth-routes"},"body":"<h1><a id=\"documentation\" class=\"anchor\" aria-hidden=\"true\" href=\"#documentation\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Documentation</h1><blockquote>\n<p>Nuxt.js can be used to create authenticated routes easily.</p>\n</blockquote>\n<h2><a id=\"official-code-auth-module-code-\" class=\"anchor\" aria-hidden=\"true\" href=\"#official-code-auth-module-code-\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Official <code>auth-module</code></h2><p>If you want to implement complex authentication flows, for example OAuth2, we suggest using the official <a href=\"https://github.com/nuxt-community/auth-module\"><code>auth-module</code></a></p>\n<h2><a id=\"using-express-and-sessions\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-express-and-sessions\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Using Express and Sessions</h2><p>To add the sessions feature in our application, we will use <code>express</code> and <code>express-session</code>, for this, we need to use Nuxt.js programmatically.</p>\n<p>First, we install the dependencies:</p>\n<pre><code class=\"hljs bash\">yarn add express express-session body-parser whatwg-fetch</code></pre><p><em>We will talk about <code>whatwg-fetch</code> later.</em></p>\n<p>Then we create our <code>server.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> { Nuxt, Builder } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nuxt'</span>)\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>)\n<span class=\"hljs-keyword\">const</span> session = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express-session'</span>)\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)()\n\n<span class=\"hljs-comment\">// Body parser, to access `req.body`</span>\napp.use(bodyParser.json())\n\n<span class=\"hljs-comment\">// Sessions to create `req.session`</span>\napp.use(session({\n  <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">'super-secret-key'</span>,\n  <span class=\"hljs-attr\">resave</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">saveUninitialized</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">cookie</span>: { <span class=\"hljs-attr\">maxAge</span>: <span class=\"hljs-number\">60000</span> }\n}))\n\n<span class=\"hljs-comment\">// POST `/api/login` to log in the user and add him to the `req.session.authUser`</span>\napp.post(<span class=\"hljs-string\">'/api/login'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (req.body.username === <span class=\"hljs-string\">'demo'</span> &amp;&amp; req.body.password === <span class=\"hljs-string\">'demo'</span>) {\n    req.session.authUser = { <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'demo'</span> }\n    <span class=\"hljs-keyword\">return</span> res.json({ <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'demo'</span> })\n  }\n  res.status(<span class=\"hljs-number\">401</span>).json({ <span class=\"hljs-attr\">error</span>: <span class=\"hljs-string\">'Bad credentials'</span> })\n})\n\n<span class=\"hljs-comment\">// POST `/api/logout` to log out the user and remove it from the `req.session`</span>\napp.post(<span class=\"hljs-string\">'/api/logout'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  <span class=\"hljs-keyword\">delete</span> req.session.authUser\n  res.json({ <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span> })\n})\n\n<span class=\"hljs-comment\">// We instantiate Nuxt.js with the options</span>\n<span class=\"hljs-keyword\">const</span> isProd = process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span>\n<span class=\"hljs-keyword\">const</span> nuxt = <span class=\"hljs-keyword\">new</span> Nuxt({ <span class=\"hljs-attr\">dev</span>: !isProd })\n<span class=\"hljs-comment\">// No build in production</span>\n<span class=\"hljs-keyword\">if</span> (!isProd) {\n  <span class=\"hljs-keyword\">const</span> builder = <span class=\"hljs-keyword\">new</span> Builder(nuxt)\n  builder.build()\n}\napp.use(nuxt.render)\napp.listen(<span class=\"hljs-number\">3000</span>)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Server is listening on http://localhost:3000'</span>)</code></pre><p>And we update our <code>package.json</code> scripts:</p>\n<pre><code class=\"hljs json\">// ...\n\"scripts\": {\n  \"dev\": \"node server.js\",\n  \"build\": \"nuxt build\",\n  \"start\": \"cross-env NODE_ENV=production node server.js\"\n}\n// ...</code></pre><p>Note: You&#39;ll need to run <code>npm install --save-dev cross-env</code> for the above example to work. If you&#39;re <em>not</em> developing on Windows you can leave cross-env out of your <code>start</code> script and set <code>NODE_ENV</code> directly.</p>\n<h2><a id=\"using-the-store\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-the-store\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Using the store</h2><p>We need a global state to let our application know if the user is connected <strong>across the pages</strong>.</p>\n<p>To let Nuxt.js use Vuex, we create a <code>store/index.js</code> file:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex'</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-comment\">// Polyfill for `window.fetch()`</span>\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'whatwg-fetch'</span>)\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n\n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n    <span class=\"hljs-attr\">authUser</span>: <span class=\"hljs-literal\">null</span>\n  }),\n\n  <span class=\"hljs-attr\">mutations</span>: {\n    <span class=\"hljs-attr\">SET_USER</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">state, user</span>) </span>{\n      state.authUser = user\n    }\n  },\n\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-comment\">// ...</span>\n  }\n\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> store</code></pre><ol>\n<li>We import <code>Vue</code> and <code>Vuex</code> (included in Nuxt.js) and we tell Vue to use Vuex to let us use <code>$store</code> in our components.</li>\n<li>We <code>require(&#39;whatwg-fetch&#39;)</code> to polyfill the <code>fetch()</code> method across all browsers (see <a href=\"https://github.com/github/fetch\">fetch repo</a>).</li>\n<li>We create our <code>SET_USER</code> mutation which will set the <code>state.authUser</code> to the connected user.</li>\n<li>We export our store instance to Nuxt.js can inject it to our main application.</li>\n</ol>\n<h3><a id=\"nuxtserverinit-action\" class=\"anchor\" aria-hidden=\"true\" href=\"#nuxtserverinit-action\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>nuxtServerInit() action</h3><p>Nuxt.js will call a specific action called <code>nuxtServerInit</code> with the context in argument, so when the app will be loaded, the store will be already filled with some data we can get from the server.</p>\n<p>In our <code>store/index.js</code>, we can add the <code>nuxtServerInit</code> action:</p>\n<pre><code class=\"hljs js\">nuxtServerInit ({ commit }, { req }) {\n  <span class=\"hljs-keyword\">if</span> (req.session &amp;&amp; req.session.authUser) {\n    commit(<span class=\"hljs-string\">'SET_USER'</span>, req.session.authUser)\n  }\n}</code></pre><p>To make the data method asynchronous, Nuxt.js offers you different ways, choose the one you&#39;re the most familiar with:</p>\n<ol>\n<li>returning a <code>Promise</code>, Nuxt.js will wait for the promise to be resolved before rendering the component.</li>\n<li>Using the <a href=\"https://github.com/lukehoban/ecmascript-asyncawait\"><code>async</code>/<code>await</code> proposal</a> (<a href=\"https://zeit.co/blog/async-and-await\">learn more about it</a>).</li>\n</ol>\n<h3><a id=\"login-action\" class=\"anchor\" aria-hidden=\"true\" href=\"#login-action\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>login() action</h3><p>We add a <code>login</code> action which will be called from our pages component to log in the user:</p>\n<pre><code class=\"hljs js\">login ({ commit }, { username, password }) {\n  <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/login'</span>, {\n    <span class=\"hljs-comment\">// Send the client cookies to the server</span>\n    credentials: <span class=\"hljs-string\">'same-origin'</span>,\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>\n    },\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({\n      username,\n      password\n    })\n  })\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (res.status === <span class=\"hljs-number\">401</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Bad credentials'</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> res.json()\n    }\n  })\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">authUser</span>) =&gt;</span> {\n    commit(<span class=\"hljs-string\">'SET_USER'</span>, authUser)\n  })\n}</code></pre><h3><a id=\"logout-method\" class=\"anchor\" aria-hidden=\"true\" href=\"#logout-method\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>logout() method</h3><pre><code class=\"hljs js\">logout ({ commit }) {\n  <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/logout'</span>, {\n    <span class=\"hljs-comment\">// Send the client cookies to the server</span>\n    credentials: <span class=\"hljs-string\">'same-origin'</span>,\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    commit(<span class=\"hljs-string\">'SET_USER'</span>, <span class=\"hljs-literal\">null</span>)\n  })\n}</code></pre><h2><a id=\"pages-components\" class=\"anchor\" aria-hidden=\"true\" href=\"#pages-components\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Pages components</h2><p>Then we can use <code>$store.state.authUser</code> in our pages components to check if the user is connected in our application or not.</p>\n<h3><a id=\"redirect-user-if-not-connected\" class=\"anchor\" aria-hidden=\"true\" href=\"#redirect-user-if-not-connected\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Redirect user if not connected</h3><p>Let&#39;s add a <code>/secret</code> route where only the connected user can see its content:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Super secret page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Back to the home page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-comment\">// we use fetch() because we do not need to set data to this component</span>\n  fetch ({ store, redirect }) {\n    <span class=\"hljs-keyword\">if</span> (!store.state.authUser) {\n      <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">'/'</span>)\n    }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>We can see in the <code>fetch</code> method that we call <code>redirect(&#39;/&#39;)</code> when our user is not connected.</p>\n"}]