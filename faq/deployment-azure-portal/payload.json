[{},{"attrs":{"title":"Azure Portal Deployment","description":"How to deploy a Nuxt.js application on Azure Portal?"},"body":"<h1><a id=\"how-to-deploy-on-azure-portal\" class=\"anchor\" aria-hidden=\"true\" href=\"#how-to-deploy-on-azure-portal\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>How to deploy on Azure Portal</h1><p>If you are using Azure DevOps and let the build pipeline do its work you and want to store artifacts. Files\nwhich are prefixed with a <code>.</code> must be moved to the artifact folder explicitly. Then you can create an Artifact Archive and \ndownload it afterwards in your Release Deployment. </p>\n<h2><a id=\"running-the-webserver\" class=\"anchor\" aria-hidden=\"true\" href=\"#running-the-webserver\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Running the webserver</h2><p>For Azure Portal you will need a <code>web.config</code> file. If not supplied, it will create one itself. This one <strong>won&#39;t work for Nuxt</strong> though.\nAdd a web.config file to your repository. For the latest version of <code>Nuxt</code> the server file is located at <code>server/index.js</code>. \nIn the web.config you don&#39;t specify the exact path <code>server/index.js</code> but just <code>server</code>. See the example web.config below. If you don&#39;t do\nthis the logs will tell you that Vue cannot find any routes.</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"hljs-comment\">&lt;!--\n     This configuration file is required if iisnode is used to run node processes behind\n     IIS or IIS Express.  For more information, visit:\n\n     https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config\n--&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Visit http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx for more information on WebSocket support --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">webSocket</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"false\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">handlers</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- Indicates that the server.js file is a node.js site to be handled by the iisnode module --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"iisnode\"</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"server\"</span> <span class=\"hljs-attr\">verb</span>=<span class=\"hljs-string\">\"*\"</span> <span class=\"hljs-attr\">modules</span>=<span class=\"hljs-string\">\"iisnode\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">handlers</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rewrite</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rules</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Do not interfere with requests for node-inspector debugging --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rule</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"NodeInspector\"</span> <span class=\"hljs-attr\">patternSyntax</span>=<span class=\"hljs-string\">\"ECMAScript\"</span> <span class=\"hljs-attr\">stopProcessing</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">match</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">\"^server\\/debug[\\/]?\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rule</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- First we consider whether the incoming URL matches a physical file in the /public folder --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rule</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"StaticContent\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"Rewrite\"</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">\"public{REQUEST_URI}\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rule</span>&gt;</span>\n\n        <span class=\"hljs-comment\">&lt;!-- All other URLs are mapped to the node.js site entry point --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rule</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"DynamicContent\"</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">conditions</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"{REQUEST_FILENAME}\"</span> <span class=\"hljs-attr\">matchType</span>=<span class=\"hljs-string\">\"IsFile\"</span> <span class=\"hljs-attr\">negate</span>=<span class=\"hljs-string\">\"True\"</span>/&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">conditions</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"Rewrite\"</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">\"server\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rule</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rules</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rewrite</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 'bin' directory has no special meaning in node.js and apps can be placed in it --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">security</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">requestFiltering</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hiddenSegments</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">remove</span> <span class=\"hljs-attr\">segment</span>=<span class=\"hljs-string\">\"bin\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hiddenSegments</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">requestFiltering</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">security</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- Make sure error responses are left untouched --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">httpErrors</span> <span class=\"hljs-attr\">existingResponse</span>=<span class=\"hljs-string\">\"PassThrough\"</span> /&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!--\n      You can control how Node is hosted within IIS using the following options:\n        * watchedFiles: semi-colon separated list of files that will be watched for changes to restart the server\n        * node_env: will be propagated to node as NODE_ENV environment variable\n        * debuggingEnabled - controls whether the built-in debugger is enabled\n\n      See https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config for a full list of options\n    --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--&lt;iisnode watchedFiles=\"web.config;*.js\"/&gt;--&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">system.webServer</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span></code></pre>","docLink":"https://github.com/nuxt/docs/blob/master/en/faq/deployment-azure-portal.md"}]