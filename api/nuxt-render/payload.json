[{},{"attrs":{"title":"API: nuxt.render(req, res)","description":"You can use Nuxt.js as a middleware for your Node.js server."},"body":"<h1><a id=\"nuxt-render-req-res-\" class=\"anchor\" aria-hidden=\"true\" href=\"#nuxt-render-req-res-\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>nuxt.render(req, res)</h1><ul>\n<li>Type: <code>Function</code></li>\n<li>Arguments:<ol>\n<li><a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\">Request</a></li>\n<li><a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\">Response</a></li>\n</ol>\n</li>\n<li>Returns: <code>Promise</code></li>\n</ul>\n<blockquote>\n<p>You can use Nuxt.js as a middleware with <code>nuxt.render</code> for your node.js server.</p>\n</blockquote>\n<p>Example with <a href=\"https://github.com/expressjs/express\">Express</a>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> { Nuxt, Builder } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nuxt'</span>)\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)()\n<span class=\"hljs-keyword\">const</span> isProd = (process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span>)\n<span class=\"hljs-keyword\">const</span> port = process.env.PORT || <span class=\"hljs-number\">3000</span>\n\n<span class=\"hljs-comment\">// We instantiate Nuxt.js with the options</span>\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./nuxt.config.js'</span>)\nconfig.dev = !isProd\n<span class=\"hljs-keyword\">const</span> nuxt = <span class=\"hljs-keyword\">new</span> Nuxt(config)\n\n<span class=\"hljs-comment\">// Render every route with Nuxt.js</span>\napp.use(nuxt.render)\n\n<span class=\"hljs-comment\">// Build only in dev mode with hot-reloading</span>\n<span class=\"hljs-keyword\">if</span> (config.dev) {\n  <span class=\"hljs-keyword\">new</span> Builder(nuxt).build()\n  .then(listen)\n}\n<span class=\"hljs-keyword\">else</span> {\n  listen()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">listen</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Listen the server</span>\n  app.listen(port, <span class=\"hljs-string\">'0.0.0.0'</span>)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Server listening on `localhost:'</span> + port + <span class=\"hljs-string\">'`.'</span>)\n}</code></pre><div class=\"Alert\">\n\n<p>It&#39;s recommended to call <code>nuxt.render</code> at the end of your middlewares since it will handle the rendering of your web application and won&#39;t call <code>next()</code></p>\n</div>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/api/nuxt-render.md"}]