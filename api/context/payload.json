[{},{"attrs":{"title":"API: The Context","description":"The `context` provides additional objects/params from Nuxt not traditionally available to Vue components. The `context` is available in special nuxt lifecycle areas like `asyncData`, `plugins`, 'middlewares', 'modules', and 'store/nuxtServerInit`."},"body":"<h1><a id=\"the-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-context\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The Context</h1><blockquote>\n<p>The <code>context</code> provides additional objects/params from Nuxt to Vue components. The <code>context</code> is available in special nuxt lifecycle areas like <code>asyncData</code>, <code>fetch</code>, <code>plugins</code>, &#39;middleware&#39;, &#39;modules&#39;, and &#39;nuxtServerInit`.</p>\n</blockquote>\n<h2><a id=\"available-keys\" class=\"anchor\" aria-hidden=\"true\" href=\"#available-keys\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Available keys</h2><div class=\"Alert Alert--teal\">\n\n<p>  <strong>Note:</strong> This is <strong>not</strong> the context passed into the <code>build.extend</code> function.</p>\n</div>\n\n\n<p>List of all the available keys in <code>context</code>:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Type</th>\n<th>Available</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>app</code></td>\n<td><code>NuxtAppOptions</code></td>\n<td>Client &amp; Server</td>\n<td>The root Vue instance options that includes all your plugins. For example, when using <code>axios</code>, you can get access to <code>$axios</code> through <code>context.app.$axios</code>.</td>\n</tr>\n<tr>\n<td><code>isClient</code></td>\n<td><code>Boolean</code></td>\n<td>Client &amp; Server</td>\n<td><strong>Deprecated!</strong> Use <code>process.client</code>. Boolean to let you know if you&#39;re actually renderer from the client-side.</td>\n</tr>\n<tr>\n<td><code>isServer</code></td>\n<td><code>Boolean</code></td>\n<td>Client &amp; Server</td>\n<td><strong>Deprecated!</strong> Use <code>process.server</code>. Boolean to let you know if you&#39;re actually renderer from the server-side.</td>\n</tr>\n<tr>\n<td><code>isStatic</code></td>\n<td><code>Boolean</code></td>\n<td>Client &amp; Server</td>\n<td><strong>Deprecated!</strong> Use <code>process.static</code>. Boolean to let you know if you&#39;re actually inside a generated app (via <code>nuxt generate</code>).</td>\n</tr>\n<tr>\n<td><code>isDev</code></td>\n<td><code>Boolean</code></td>\n<td>Client &amp; Server</td>\n<td>Boolean to let you know if you&#39;re in dev mode, can be useful for caching some data in production.</td>\n</tr>\n<tr>\n<td><code>isHMR</code></td>\n<td><code>Boolean</code></td>\n<td>Client &amp; Server</td>\n<td>Boolean to let you know if the method/middleware is called from webpack hot module replacement (<em>only on client-side in dev mode</em>).</td>\n</tr>\n<tr>\n<td><code>route</code></td>\n<td><a href=\"https://router.vuejs.org/en/api/route-object.html\">Vue Router Route</a></td>\n<td>Client &amp; Server</td>\n<td>Vue Router route instance.</td>\n</tr>\n<tr>\n<td><code>from</code></td>\n<td><a href=\"https://router.vuejs.org/en/api/route-object.html\">Vue Router Route</a></td>\n<td>Client</td>\n<td>The route navigated from</td>\n</tr>\n<tr>\n<td><code>store</code></td>\n<td><a href=\"https://vuex.vuejs.org/en/api.html#vuexstore-instance-properties\">Vuex Store</a></td>\n<td>Client &amp; Server</td>\n<td>Vuex Store instance. <strong>Available only if the <a href=\"/guide/vuex-store\">vuex store</a> is set</strong>.</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td><code>Object</code></td>\n<td>Client &amp; Server</td>\n<td>Environment variables set in <code>nuxt.config.js</code>, see <a href=\"/api/configuration-env\">env api</a>.</td>\n</tr>\n<tr>\n<td><code>params</code></td>\n<td><code>Object</code></td>\n<td>Client &amp; Server</td>\n<td>Alias of <code>route.params</code>.</td>\n</tr>\n<tr>\n<td><code>query</code></td>\n<td><code>Object</code></td>\n<td>Client &amp; Server</td>\n<td>Alias of <code>route.query</code>.</td>\n</tr>\n<tr>\n<td><code>req</code></td>\n<td><a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\"><code>http.Request</code></a></td>\n<td>Server</td>\n<td>Request from the Node.js server. If Nuxt is used as a middleware, the request object might be different depending on the framework you&#39;re using.<br><strong>Not available via <code>nuxt generate</code></strong>.</td>\n</tr>\n<tr>\n<td><code>res</code></td>\n<td><a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\"><code>http.Response</code></a></td>\n<td>Server</td>\n<td>Response from the Node.js server. If Nuxt is used as a middleware, the res object might be different depending on the framework you&#39;re using.<br><strong>Not available via <code>nuxt generate</code></strong>.</td>\n</tr>\n<tr>\n<td><code>redirect</code></td>\n<td><code>Function</code></td>\n<td>Client &amp; Server</td>\n<td>Use this method to redirect the user to another route, the status code is used on the server-side, defaults to <code>302</code>. <code>redirect([status,] path [, query])</code>.</td>\n</tr>\n<tr>\n<td><code>error</code></td>\n<td><code>Function</code></td>\n<td>Client &amp; Server</td>\n<td>Use this method to show the error page: <code>error(params)</code>. The <code>params</code> should have the properties <code>statusCode</code> and <code>message</code>.</td>\n</tr>\n<tr>\n<td><code>nuxtState</code></td>\n<td><code>Object</code></td>\n<td>Client</td>\n<td>Nuxt state, useful for plugins which uses <code>beforeNuxtRender</code> to get the nuxt state on client-side before hydration. <strong>Available only in <code>universal</code> mode</strong>.</td>\n</tr>\n<tr>\n<td><code>beforeNuxtRender(fn)</code></td>\n<td><code>Function</code></td>\n<td>Server</td>\n<td>Use this method to update <code>__NUXT__</code> variable rendered on client-side, the <code>fn</code> (can be asynchronous) is called with <code>{ Components, nuxtState }</code>, see <a href=\"https://github.com/nuxt/nuxt.js/blob/cf6b0df45f678c5ac35535d49710c606ab34787d/test/fixtures/basic/pages/special-state.vue\">example</a>.</td>\n</tr>\n</tbody></table>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/api/context.md"}]