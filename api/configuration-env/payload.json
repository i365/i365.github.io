[{},{"attrs":{"title":"API: The env Property","description":"Share environment variables between client and server."},"body":"<h1><a id=\"the-env-property\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-env-property\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The env Property</h1><ul>\n<li>Type: <code>Object</code></li>\n</ul>\n<blockquote>\n<p>Nuxt.js lets you create environment variables that will be shared for the client and server-side.</p>\n</blockquote>\n<p>Example (<code>nuxt.config.js</code>):</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">env</span>: {\n    <span class=\"hljs-attr\">baseUrl</span>: process.env.BASE_URL || <span class=\"hljs-string\">'http://localhost:3000'</span>\n  }\n}</code></pre><p>This lets you create a <code>baseUrl</code> property that will be equal to the <code>BASE_URL</code> environment variable if defined, otherwise, equal to <code>&#39;http://localhost:3000&#39;</code>.</p>\n<p>Then, I can access my <code>baseUrl</code> variable in 2 ways:</p>\n<ol>\n<li>Via <code>process.env.baseUrl</code>.</li>\n<li>Via <code>context.env.baseUrl</code>, see <a href=\"/api/context\">context API</a>.</li>\n</ol>\n<p>You can use the <code>env</code> property for giving a public token for example.</p>\n<p>For the example above, we can use it to configure <a href=\"https://github.com/mzabriskie/axios\">axios</a>.</p>\n<p><code>plugins/axios.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> axios.create({\n  <span class=\"hljs-attr\">baseURL</span>: process.env.baseUrl\n})</code></pre><p>Then, in your pages, you can import axios like this: <code>import axios from &#39;~/plugins/axios&#39;</code></p>\n<h2><a id=\"automatic-injection-of-environment-variables\" class=\"anchor\" aria-hidden=\"true\" href=\"#automatic-injection-of-environment-variables\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Automatic injection of environment variables</h2><p>If you define environment variables starting with <code>NUXT_ENV_</code> in the build phase (f.ex. <code>NUXT_ENV_COOL_WORD=freezing nuxt build</code>, they&#39;ll be automatically injected into the process environment. Be aware that they&#39;ll potentially take precedence over defined variables in your <code>nuxt.config.js</code> with the same name.</p>\n<h2><a id=\"process-env-\" class=\"anchor\" aria-hidden=\"true\" href=\"#process-env-\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>process.env == {}</h2><p>Note that Nuxt uses webpack&#39;s <code>definePlugin</code> to define the environmental variable. This means that the actual <code>process</code> or <code>process.env</code> from Node.js is neither available nor defined. Each of the <code>env</code> properties defined in nuxt.config.js is individually mapped to <code>process.env.xxxx</code> and converted during compilation.</p>\n<p>Meaning, <code>console.log(process.env)</code> will output <code>{}</code> but <code>console.log(process.env.your_var)</code> will still output your value. When webpack compiles your code, it replaces all instances of <code>process.env.your_var</code> to the value you&#39;ve set it to. ie: <code>env.test = &#39;testing123&#39;</code>. If you use <code>process.env.test</code> in your code somewhere, it is actually translated to &#39;testing123&#39;.</p>\n<p>before</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (process.env.test == <span class=\"hljs-string\">'testing123'</span>)</code></pre><p>after</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'testing123'</span> == <span class=\"hljs-string\">'testing123'</span>)</code></pre>","docLink":"https://github.com/nuxt/docs/blob/master/en/api/configuration-env.md"}]