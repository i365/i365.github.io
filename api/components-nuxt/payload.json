[{},{"attrs":{"title":"API: The <nuxt> Component","description":"Display the page components inside a layout."},"body":"<h1><a id=\"the-lt-nuxt-gt-component\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-lt-nuxt-gt-component\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The &lt;nuxt&gt; Component</h1><blockquote>\n<p>This component is used only in <a href=\"/guide/views#layouts\">layouts</a> to display the page components.</p>\n</blockquote>\n<p>Example (<code>layouts/default.vue</code>):</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>My nav bar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>My footer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre><p>To see an example, take a look at the <a href=\"/examples/layouts\">layouts example</a>.</p>\n<p><strong>Props</strong>:</p>\n<ul>\n<li>nuxtChildKey: <code>string</code><ul>\n<li>This prop will be set to <code>&lt;router-view/&gt;</code>, useful to make transitions inside a dynamic page and different route.</li>\n<li>Default: <code>$route.path</code></li>\n</ul>\n</li>\n</ul>\n<p>There are 3 ways to handle internal <code>key</code> prop of <code>&lt;router-view/&gt;</code>.</p>\n<ol>\n<li><p><code>nuxtChildKey</code> prop</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt</span> <span class=\"hljs-attr\">:nuxt-child-key</span>=<span class=\"hljs-string\">\"someKey\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre></li>\n<li><p><code>key</code> option in page components: <code>string</code> or <code>function</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  key(route) {\n    <span class=\"hljs-keyword\">return</span> route.fullPath\n  }\n}</code></pre></li>\n</ol>\n<ul>\n<li>name: <code>string</code> (<em>introduced with Nuxt v2.4.0</em>)<ul>\n<li>This prop will be set to <code>&lt;router-view/&gt;</code>, used to render named-view of page component.</li>\n<li>Default: <code>default</code></li>\n</ul>\n</li>\n</ul>\n<p>To see an example, take a look at the <a href=\"/examples/named-views\">named-views example</a>.</p>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/api/components-nuxt.md"}]