[{},{"attrs":{"title":"API: The fetch Method","description":"The `fetch` method is used to fill the store before rendering the page, it's like the `asyncData` method except it doesn't set the component data."},"body":"<h1><a id=\"the-fetch-method\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-fetch-method\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The fetch Method</h1><blockquote>\n<p>The fetch method is used to fill the store before rendering the page, it&#39;s like the <code>asyncData</code> method except it doesn&#39;t set the component data.</p>\n</blockquote>\n<ul>\n<li><strong>Type:</strong> <code>Function</code></li>\n</ul>\n<p>The <code>fetch</code> method, <em>if set</em>, is called every time before loading the component (<strong>only for page components</strong>). It will be called server-side once (on the first request to the Nuxt app) and client-side when navigating to further routes. </p>\n<p>The <code>fetch</code> method receives <a href=\"/api/context\">the <code>context</code></a> object as the first argument, we can use it to fetch some data and fill the store. To make the <code>fetch</code> method asynchronous, <strong>return a Promise</strong>, Nuxt.js will wait for the promise to be resolved before rendering the component.</p>\n<div class=\"Alert Alert--orange\">\n\n<p><strong>Warning</strong>: You <strong>don&#39;t</strong> have access of the component instance through <code>this</code> inside <code>fetch</code> because it is called <strong>before initiating</strong> the component.</p>\n</div>\n\n\n<p>Example of <code>pages/index.vue</code>:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Stars: {{ $store.state.stars }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  fetch ({ store, params }) {\n    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">'http://my-api/stars'</span>)\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n      store.commit(<span class=\"hljs-string\">'setStars'</span>, res.data)\n    })\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>You can also use <code>async</code>/<code>await</code> to make your code cleaner:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Stars: {{ $store.state.stars }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-keyword\">async</span> fetch ({ store, params }) {\n    <span class=\"hljs-keyword\">let</span> { data } = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">'http://my-api/stars'</span>)\n    store.commit(<span class=\"hljs-string\">'setStars'</span>, data)\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h2><a id=\"vuex\" class=\"anchor\" aria-hidden=\"true\" href=\"#vuex\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Vuex</h2><p>If you want to call a store action, use <code>store.dispatch</code> inside <code>fetch</code>, make sure to wait for the end of the action by using <code>async</code>/<code>await</code> inside:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-keyword\">async</span> fetch ({ store, params }) {\n    <span class=\"hljs-keyword\">await</span> store.dispatch(<span class=\"hljs-string\">'GET_STARS'</span>);\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p><code>store/index.js</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> actions = {\n  <span class=\"hljs-keyword\">async</span> GET_STARS ({ commit }) {\n    <span class=\"hljs-keyword\">const</span> { data } = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">'http://my-api/stars'</span>)\n    commit(<span class=\"hljs-string\">'SET_STARS'</span>, data)\n  }\n}</code></pre><h2><a id=\"listening-to-query-string-changes\" class=\"anchor\" aria-hidden=\"true\" href=\"#listening-to-query-string-changes\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Listening to query string changes</h2><p>The <code>fetch</code> method <strong>is not called</strong> on query string changes by default. If you want to change this behavior, for example when building a pagination component, you can setup parameters that should be listened to through the <code>watchQuery</code> property of your page component. Learn more on the <a href=\"/api/pages-watchquery\">API <code>watchQuery</code> page</a>.</p>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/api/pages-fetch.md"}]