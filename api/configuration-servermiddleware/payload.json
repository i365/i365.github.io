[{},{"attrs":{"title":"API: The serverMiddleware Property","description":"Define server-side middleware."},"body":"<h1><a id=\"the-servermiddleware-property\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-servermiddleware-property\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The serverMiddleware Property</h1><ul>\n<li>Type: <code>Array</code><ul>\n<li>Items: <code>String</code> or <code>Object</code> or <code>Function</code></li>\n</ul>\n</li>\n</ul>\n<p>Nuxt internally creates a <a href=\"https://github.com/senchalabs/connect\">connect</a> instance that we can add our own custom middleware to. This allows us to register additional routes (typically <code>/api</code> routes) <strong>without need for an external server</strong>.</p>\n<p>Because connect itself is a middleware, registered middleware will work with both <code>nuxt start</code>\nand also when used as a middleware with programmatic usages like <a href=\"https://github.com/nuxt-community/express-template\">express-template</a>.\nNuxt <a href=\"/guide/modules\">Modules</a> can also provide <code>serverMiddleware</code>\nusing <a href=\"/api/internals-module-container#addservermiddleware-middleware-\">this.addServerMiddleware()</a></p>\n<p>Additional to them, we introduced a <code>prefix</code> option which defaults to <code>true</code>. It will add the router base to your server middlewares.</p>\n<p><strong>Example:</strong></p>\n<ul>\n<li>Server middleware path: <code>/api</code></li>\n<li>Router base: <code>/admin</code></li>\n<li>With <code>prefix: true</code> (default): <code>/admin/api</code></li>\n<li>With <code>prefix: false</code>: <code>/api</code></li>\n</ul>\n<h2><a id=\"servermiddleware-vs-middleware-\" class=\"anchor\" aria-hidden=\"true\" href=\"#servermiddleware-vs-middleware-\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>serverMiddleware vs middleware!</h2><p>Don&#39;t confuse it with <a href=\"/guide/routing#middleware\">routes middleware</a> which are called before each route by Vue in Client Side or SSR.\nMiddleware listed in the <code>serverMiddleware</code> property runs server-side <strong>before</strong> <code>vue-server-renderer</code> and can be used for server specific tasks like handling API requests or serving assets.</p>\n<h2><a id=\"usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Usage</h2><p>If middleware is String Nuxt.js will try to automatically resolve and require it.</p>\n<p>Example (<code>nuxt.config.js</code>):</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> serveStatic <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'serve-static'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">serverMiddleware</span>: [\n      <span class=\"hljs-comment\">// Will register redirect-ssl npm package</span>\n      <span class=\"hljs-string\">'redirect-ssl'</span>,\n\n      <span class=\"hljs-comment\">// Will register file from project api directory to handle /api/* requires</span>\n      { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/api'</span>, <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-string\">'~/api/index.js'</span> },\n\n      <span class=\"hljs-comment\">// We can create custom instances too</span>\n      { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/static2'</span>, <span class=\"hljs-attr\">handler</span>: serveStatic(__dirname + <span class=\"hljs-string\">'/static2'</span>) }\n  ]\n}</code></pre><p class=\"Alert Alert--danger\">\n    <b>HEADS UP! </b>\n    If you don't want middleware to register for all routes you have to use Object form with specific path,\n    otherwise nuxt default handler won't work!\n</p>\n\n<h2><a id=\"custom-server-middleware\" class=\"anchor\" aria-hidden=\"true\" href=\"#custom-server-middleware\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Custom Server Middleware</h2><p>It is also possible to write custom middleware. For more information See <a href=\"https://github.com/senchalabs/connect#appusefn\">Connect Docs</a>.</p>\n<p>Middleware (<code>api/logger.js</code>):</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) </span>{\n    <span class=\"hljs-comment\">// req is the Node.js http request object</span>\n    <span class=\"hljs-built_in\">console</span>.log(req.path)\n\n    <span class=\"hljs-comment\">// res is the Node.js http response object</span>\n\n    <span class=\"hljs-comment\">// next is a function to call to invoke the next middleware</span>\n    <span class=\"hljs-comment\">// Don't forget to call next at the end if your middleware is not an endpoint!</span>\n    next()\n}</code></pre><p>Nuxt Config (<code>nuxt.config.js</code>):</p>\n<pre><code class=\"hljs js\">serverMiddleware: [\n    <span class=\"hljs-string\">'~/api/logger'</span>\n]</code></pre>","docLink":"https://github.com/nuxt/docs/blob/master/en/api/configuration-servermiddleware.md"}]