[{},{"attrs":{"title":"API: The Renderer Class","description":"Nuxt Renderer Class"},"body":"<h1><a id=\"renderer-class\" class=\"anchor\" aria-hidden=\"true\" href=\"#renderer-class\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Renderer Class</h1><ul>\n<li>Source: <strong><a href=\"https://github.com/nuxt/nuxt.js/blob/dev/packages/vue-renderer/src/renderer.js\">vue-renderer/renderer.js</a></strong></li>\n</ul>\n<p>This class is exporting a connect middleware which handles and serves all SSR and asset requests.</p>\n<h2><a id=\"hooks\" class=\"anchor\" aria-hidden=\"true\" href=\"#hooks\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Hooks</h2><p>We can register hooks on certain life cycle events.</p>\n<table>\n<thead>\n<tr>\n<th>Hook</th>\n<th>Arguments</th>\n<th>When</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>render:before</code></td>\n<td>(renderer, options)</td>\n<td>Before setting up middleware and resources for the Renderer class, useful to overload some methods or options.</td>\n</tr>\n<tr>\n<td><code>render:setupMiddleware</code></td>\n<td>(app) <em>connect instance</em></td>\n<td>Before Nuxt adds it&#39;s middleware stack. We can use it to register custom server side middleware.</td>\n</tr>\n<tr>\n<td><code>render:errorMiddleware</code></td>\n<td>(app) <em>connect instance</em></td>\n<td>Before adding Nuxt error middleware, useful to add your own middleware before using Nuxt&#39;s. See the <a href=\"https://github.com/nuxt-community/sentry-module/blob/master/lib/sentry.js\">Sentry module</a> for more info.</td>\n</tr>\n<tr>\n<td><code>render:resourcesLoaded</code></td>\n<td>(resources)</td>\n<td>Called after resources for renderer are loaded (client manifest, server bundle, etc).</td>\n</tr>\n<tr>\n<td><code>render:done</code></td>\n<td>(renderer)</td>\n<td>SSR Middleware and all resources are ready (Renderer ready)</td>\n</tr>\n<tr>\n<td><code>render:routeContext</code></td>\n<td>(context.nuxt)</td>\n<td><em>Every time a route is server-rendered and before <code>render:route</code> hook</em>. Called before serializing Nuxt context into <code>window.__NUXT__</code>, useful to add some data that you can fetch on client-side.</td>\n</tr>\n<tr>\n<td><code>render:route</code></td>\n<td>(url, result, context)</td>\n<td><em>Every time a route is server-rendered</em>. Called before sending back the request to the browser.</td>\n</tr>\n<tr>\n<td><code>render:routeDone</code></td>\n<td>(url, result, context)</td>\n<td><em>Every time a route is server-rendered</em>. Called after the response has been sent to the browser.</td>\n</tr>\n</tbody></table>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/api/internals-renderer.md"}]