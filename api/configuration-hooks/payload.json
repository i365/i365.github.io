[{},{"attrs":{"title":"API: The hooks Property","description":"Hooks are listeners to Nuxt events that are typically used in Nuxt modules, but are also available in `nuxt.config.js`."},"body":"<h1><a id=\"the-hooks-property\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-hooks-property\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The hooks Property</h1><ul>\n<li>Type: <code>Object</code></li>\n</ul>\n<blockquote>\n<p>Hooks are <a href=\"/api/internals\">listeners to Nuxt events</a> that are typically used in Nuxt modules, but are also available in <code>nuxt.config.js</code>. <a href=\"/api/internals\">Learn More</a></p>\n</blockquote>\n<p>Example (<code>nuxt.config.js</code>):</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">hooks</span>: {\n    <span class=\"hljs-attr\">build</span>: {\n      done(builder) {\n        <span class=\"hljs-keyword\">const</span> extraFilePath = path.join(builder.nuxt.options.buildDir, <span class=\"hljs-string\">'extra-file'</span>)\n        fs.writeFileSync(extraFilePath, <span class=\"hljs-string\">'Something extra'</span>)\n      }\n    }\n  }\n}</code></pre><p>Internally, hooks follow a naming pattern using colons (e.g., <code>build:done</code>). For ease of configuration, you can structure them as an hierarchical object when using <code>nuxt.config.js</code> (as exemplifed above) to set your own hooks. See <a href=\"/api/internals\">Nuxt Internals</a> for more detailed information on how they work.</p>\n<h2><a id=\"list-of-hooks\" class=\"anchor\" aria-hidden=\"true\" href=\"#list-of-hooks\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>List of hooks</h2><ul>\n<li><a href=\"https://nuxtjs.org/api/internals-nuxt#hooks\">Nuxt hooks</a></li>\n<li><a href=\"https://nuxtjs.org/api/internals-renderer#hooks\">Renderer hooks</a></li>\n<li><a href=\"https://nuxtjs.org/api/internals-module-container#hooks\">ModulesContainer hooks</a></li>\n<li><a href=\"https://nuxtjs.org/api/internals-builder#hooks\">Builder hooks</a></li>\n<li><a href=\"https://nuxtjs.org/api/internals-generator#hooks\">Generator hooks</a></li>\n</ul>\n<h2><a id=\"examples\" class=\"anchor\" aria-hidden=\"true\" href=\"#examples\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Examples</h2><h3><a id=\"redirect-to-router-base-when-not-on-root\" class=\"anchor\" aria-hidden=\"true\" href=\"#redirect-to-router-base-when-not-on-root\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Redirect to router.base when not on root</h3><p>Let´s say you want to serve pages as <code>/portal</code> instead of <code>/</code>.</p>\n<p>This is maybe an edge-case, and the point of _nuxt.config.js_’ <code>router.base</code> is for when a Web server will serve Nuxt elsewhere than the domain root.</p>\n<p>But when in local development, hitting <em>localhost</em>, when router.base is not / returns a 404.\nIn order to prevent this, you can setup a Hook.</p>\n<p>Maybe redirecting is not the best use-case for a production Web site, but this will help you leverage Hooks.</p>\n<p>To begin, you <a href=\"/api/configuration-router#base\">can change <code>router.base</code></a>; Update your <code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// nuxt.config.js</span>\n<span class=\"hljs-keyword\">import</span> hooks <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./hooks'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">router</span>: {\n    <span class=\"hljs-attr\">base</span>: <span class=\"hljs-string\">'/portal'</span>\n  }\n  hooks: hooks(<span class=\"hljs-keyword\">this</span>)\n}</code></pre><p>Then, create a few files;</p>\n<ol>\n<li><p><code>hooks/index.js</code>, Hooks module</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// file: hooks/index.js</span>\n<span class=\"hljs-keyword\">import</span> render <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./render'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> nuxtConfig =&gt; ({\n  <span class=\"hljs-attr\">render</span>: render(nuxtConfig)\n})</code></pre></li>\n<li><p><code>hooks/render.js</code>, Render hook</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// file: hooks/render.js</span>\n<span class=\"hljs-keyword\">import</span> redirectRootToPortal <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./route-redirect-portal'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> nuxtConfig =&gt; {\n  <span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-built_in\">Reflect</span>.has(nuxtConfig, <span class=\"hljs-string\">'router'</span>) ? nuxtConfig.router : {}\n  <span class=\"hljs-keyword\">const</span> base = <span class=\"hljs-built_in\">Reflect</span>.has(router, <span class=\"hljs-string\">'base'</span>) ? router.base : <span class=\"hljs-string\">'/portal'</span>\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-comment\">/**\n     * 'render:setupMiddleware'\n     * {@link node_modules/nuxt/lib/core/renderer.js}\n     */</span>\n    setupMiddleware(app) {\n      app.use(<span class=\"hljs-string\">'/'</span>, redirectRootToPortal(base))\n    }\n  }\n}</code></pre></li>\n<li><p><code>hooks/route-redirect-portal.js</code>, The Middleware itself</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// file: hooks/route-redirect-portal.js</span>\n\n<span class=\"hljs-comment\">/**\n * Nuxt middleware hook to redirect from / to /portal (or whatever we set in nuxt.config.js router.base)\n *\n * Should be the same version as connect\n * {@link node_modules/connect/package.json}\n */</span>\n<span class=\"hljs-keyword\">import</span> parseurl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'parseurl'</span>\n\n<span class=\"hljs-comment\">/**\n * Connect middleware to handle redirecting to desired Web Applicatin Context Root.\n *\n * Notice that Nuxt docs lacks explaning how to use hooks.\n * This is a sample router to help explain.\n *\n * See nice implementation for inspiration:\n * - https://github.com/nuxt/nuxt.js/blob/dev/examples/with-cookies/plugins/cookies.js\n * - https://github.com/yyx990803/launch-editor/blob/master/packages/launch-editor-middleware/index.js\n *\n * [http_class_http_clientrequest]: https://nodejs.org/api/http.html#http_class_http_clientrequest\n * [http_class_http_serverresponse]: https://nodejs.org/api/http.html#http_class_http_serverresponse\n *\n * @param {http.ClientRequest} req Node.js internal client request object [http_class_http_clientrequest]\n * @param {http.ServerResponse} res Node.js internal response [http_class_http_serverresponse]\n * @param {Function} next middleware callback\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> desiredContextRoot =&gt;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">projectHooksRouteRedirectPortal</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> desiredContextRootRegExp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">`^<span class=\"hljs-subst\">${desiredContextRoot}</span>`</span>)\n    <span class=\"hljs-keyword\">const</span> _parsedUrl = <span class=\"hljs-built_in\">Reflect</span>.has(req, <span class=\"hljs-string\">'_parsedUrl'</span>) ? req._parsedUrl : <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> url = _parsedUrl !== <span class=\"hljs-literal\">null</span> ? _parsedUrl : parseurl(req)\n    <span class=\"hljs-keyword\">const</span> startsWithDesired = desiredContextRootRegExp.test(url.pathname)\n    <span class=\"hljs-keyword\">const</span> isNotProperContextRoot = desiredContextRoot !== url.pathname\n    <span class=\"hljs-keyword\">if</span> (isNotProperContextRoot &amp;&amp; startsWithDesired === <span class=\"hljs-literal\">false</span>) {\n      <span class=\"hljs-keyword\">const</span> pathname = url.pathname === <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-string\">''</span> : url.pathname\n      <span class=\"hljs-keyword\">const</span> search = url.search === <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-string\">''</span> : url.search\n      <span class=\"hljs-keyword\">const</span> Location = desiredContextRoot + pathname + search\n      res.writeHead(<span class=\"hljs-number\">302</span>, {\n        Location\n      })\n      res.end()\n    }\n    next()\n  }</code></pre></li>\n</ol>\n<p>Then, whenever a colleague in development accidentally hits <code>/</code> to reach the development web development service, Nuxt will automatically redirect to <code>/portal</code></p>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/api/configuration-hooks.md"}]