[{},{"attrs":{"title":"API: The loading Property","description":"Nuxt.js uses its own component to show a progress bar between the routes. You can customize it, disable it or create your own component."},"body":"<h1><a id=\"the-loading-property\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-loading-property\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The loading Property</h1><ul>\n<li>Type: <code>Boolean</code> or <code>Object</code> or <code>String</code></li>\n</ul>\n<blockquote>\n<p>Nuxt.js uses its own component to show a progress bar between the routes. You can customize it, disable it or create your own component.</p>\n</blockquote>\n<p>In your component you can use <code>this.$nuxt.$loading.start()</code> to start the loading bar and <code>this.$nuxt.$loading.finish()</code> to finish it.</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  mounted () {\n    <span class=\"hljs-keyword\">this</span>.$nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">this</span>.$nuxt.$loading.start()\n\n      setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.$nuxt.$loading.finish(), <span class=\"hljs-number\">500</span>)\n    })\n  }\n }</code></pre><blockquote>\n<p>If you want to start it in the <code>mounted</code> method, make sure to use <code>this.$nextTick</code>, because $loading may not be available immediately.</p>\n</blockquote>\n<h2><a id=\"disable-the-progress-bar\" class=\"anchor\" aria-hidden=\"true\" href=\"#disable-the-progress-bar\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Disable the Progress Bar</h2><ul>\n<li>Type: <code>Boolean</code></li>\n</ul>\n<p>If you don&#39;t want to display the progress bar between the routes, simply add <code>loading: false</code> in your <code>nuxt.config.js</code> file:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>\n}</code></pre><h2><a id=\"customize-the-progress-bar\" class=\"anchor\" aria-hidden=\"true\" href=\"#customize-the-progress-bar\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Customize the Progress Bar</h2><ul>\n<li>Type: <code>Object</code></li>\n</ul>\n<p>List of properties to customize the progress bar.</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>color</code></td>\n<td>String</td>\n<td><code>&#39;black&#39;</code></td>\n<td>CSS color of the progress bar</td>\n</tr>\n<tr>\n<td><code>failedColor</code></td>\n<td>String</td>\n<td><code>&#39;red&#39;</code></td>\n<td>CSS color of the progress bar when an error appended while rendering the route (if <code>data</code> or <code>fetch</code> sent back an error for example).</td>\n</tr>\n<tr>\n<td><code>height</code></td>\n<td>String</td>\n<td><code>&#39;2px&#39;</code></td>\n<td>Height of the progress bar (used in the <code>style</code> property of the progress bar)</td>\n</tr>\n<tr>\n<td><code>throttle</code></td>\n<td>Number</td>\n<td><code>200</code></td>\n<td>In ms, wait for the specified time before displaying the progress bar. Useful for preventing the bar from flashing.</td>\n</tr>\n<tr>\n<td><code>duration</code></td>\n<td>Number</td>\n<td><code>5000</code></td>\n<td>In ms, the maximum duration of the progress bar, Nuxt.js assumes that the route will be rendered before 5 seconds.</td>\n</tr>\n<tr>\n<td><code>continuous</code></td>\n<td>Boolean</td>\n<td><code>false</code></td>\n<td>Keep animating progress bar when loading takes longer than <code>duration</code>.</td>\n</tr>\n<tr>\n<td><code>css</code></td>\n<td>Boolean</td>\n<td><code>true</code></td>\n<td>Set to false to remove default progress bar styles (and add your own).</td>\n</tr>\n<tr>\n<td><code>rtl</code></td>\n<td>Boolean</td>\n<td><code>false</code></td>\n<td>Set the direction of the progress bar from right to left.</td>\n</tr>\n</tbody></table>\n<p>For a blue progress bar with 5px of height, we update the <code>nuxt.config.js</code> to the following:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">loading</span>: {\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'blue'</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">'5px'</span>\n  }\n}</code></pre><h2><a id=\"use-a-custom-loading-component\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-a-custom-loading-component\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Use a Custom Loading Component</h2><ul>\n<li>Type: <code>String</code></li>\n</ul>\n<p>You can create your own component that Nuxt.js will call instead of its default component. To do so, you need to give a path to your component in the <code>loading</code> option. Then, your component will be called directly by Nuxt.js.</p>\n<p><strong>Your component has to expose some of these methods:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>start()</code></td>\n<td>Required</td>\n<td>Called when a route changes, this is where you display your component.</td>\n</tr>\n<tr>\n<td><code>finish()</code></td>\n<td>Required</td>\n<td>Called when a route is loaded (and data fetched), this is where you hide your component.</td>\n</tr>\n<tr>\n<td><code>fail()</code></td>\n<td><em>Optional</em></td>\n<td>Called when a route couldn&#39;t be loaded (failed to fetch data for example).</td>\n</tr>\n<tr>\n<td><code>increase(num)</code></td>\n<td><em>Optional</em></td>\n<td>Called during loading the route component, <code>num</code> is an Integer &lt; 100.</td>\n</tr>\n</tbody></table>\n<p>We can create our custom component in <code>components/loading.vue</code>:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"html\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"loading-page\"</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"loading\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Loading...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n    <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-literal\">false</span>\n  }),\n  <span class=\"hljs-attr\">methods</span>: {\n    start () {\n      <span class=\"hljs-keyword\">this</span>.loading = <span class=\"hljs-literal\">true</span>\n    },\n    finish () {\n      <span class=\"hljs-keyword\">this</span>.loading = <span class=\"hljs-literal\">false</span>\n    }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.loading-page</span> {\n  <span class=\"hljs-attribute\">position</span>: fixed;\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">rgba</span>(255, 255, 255, 0.8);\n  <span class=\"hljs-attribute\">text-align</span>: center;\n  <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">200px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;\n  <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><p>Then, we update our <code>nuxt.config.js</code> to tell Nuxt.js to use our component:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">loading</span>: <span class=\"hljs-string\">'~/components/loading.vue'</span>\n}</code></pre><h2><a id=\"internals-of-the-progress-bar\" class=\"anchor\" aria-hidden=\"true\" href=\"#internals-of-the-progress-bar\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Internals of the Progress Bar</h2><p>Unfortunately it is not possible for the Loading component to know in advance how long e.g. loading a new page will take. Therefore it is not possible to accurately animate the progress bar to 100% of the loading time.</p>\n<p>Nuxt&#39;s loading component partially solves this by letting you set the <code>duration</code>, this should be set to a <em>guestimate</em> of how long the loading process will take. Unless you use a custom loading component, the progress bar will always move from 0% to 100% in <code>duration</code> time (regardless of actual progression). When the loading takes longer than <code>duration</code> time, the progress bar will stay at 100% until the loading finishes.</p>\n<p>You can change the default behaviour by setting <code>continuous</code> to true, then after reaching 100% the progress bar will start shrinking back to 0% again in <code>duration</code> time. When the loading is still not finished after reaching 0% it will start growing from 0% to 100% again, this repeats until the loading finishes.</p>\n<p><em>Example of a continuous progress bar:</em></p>\n<img src=\"/api-continuous-loading.gif\" alt=\"continuous loading\"/>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/api/configuration-loading.md"}]