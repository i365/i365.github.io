[{},{"attrs":{"title":"Plugins","description":"Nuxt.js allows you to define JavaScript plugins to be run before instantiating the root Vue.js Application. This is especially helpful when using your own libraries or external modules."},"body":"<blockquote>\n<p>Nuxt.js allows you to define JavaScript plugins to be run before instantiating the root Vue.js Application. This is especially helpful when using your own libraries or external modules.</p>\n</blockquote>\n<div class=\"Alert\">\n\n<p>It is important to know that in any Vue <a href=\"https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram\">instance lifecycle</a>, only <code>beforeCreate</code> and <code>created</code> hooks are called <strong>both, from client-side and server-side</strong>. All other hooks are called only from the client-side.</p>\n</div>\n\n<h2><a id=\"external-packages\" class=\"anchor\" aria-hidden=\"true\" href=\"#external-packages\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>External Packages</h2><p>We may want to use external packages/modules in our application (one great example is <a href=\"https://github.com/mzabriskie/axios\">axios</a>) for making HTTP request for both server and client.</p>\n<p>First, we should install it via npm:</p>\n<pre><code class=\"hljs bash\">npm install --save axios</code></pre><p>Then we can use it directly in our page components:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-keyword\">async</span> asyncData ({ params }) {\n    <span class=\"hljs-keyword\">let</span> { data } = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">`https://my-api/posts/<span class=\"hljs-subst\">${params.id}</span>`</span>)\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">title</span>: data.title }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h2><a id=\"vue-plugins\" class=\"anchor\" aria-hidden=\"true\" href=\"#vue-plugins\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Vue Plugins</h2><p>If we want to use Vue plugins, like <a href=\"https://github.com/se-panfilov/vue-notifications\">vue-notifications</a> to display notification in our application, we need to setup the plugin before launching the app.</p>\n<p>We create the file <code>plugins/vue-notifications.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> VueNotifications <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-notifications'</span>\n\nVue.use(VueNotifications)</code></pre><p>Then we add the file path inside the <code>plugins</code> key of our <code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-string\">'~/plugins/vue-notifications'</span>]\n}</code></pre><p>To learn more about the <code>plugins</code> configuration key, check out the <a href=\"/api/configuration-plugins\">plugins api</a>.</p>\n<h3><a id=\"es6-plugins\" class=\"anchor\" aria-hidden=\"true\" href=\"#es6-plugins\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>ES6 plugins</h3><p>If the plugin is located in <code>node_modules</code> and exports an ES6 module, you may need to add it to the <code>transpile</code> build option:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">build</span>: {\n    <span class=\"hljs-attr\">transpile</span>: [<span class=\"hljs-string\">'vue-notifications'</span>]\n  }\n}</code></pre><p>You can refer to the <a href=\"/api/configuration-build/#transpile\">configuration build</a> docs for more build options.</p>\n<h2><a id=\"inject-in-root-amp-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#inject-in-root-amp-context\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Inject in $root &amp; context</h2><p>Sometimes you want to make functions or values available across the app.\nYou can inject those variables into Vue instances (client side), the context (server side) and even in the Vuex store.\nIt is a convention to prefix those functions with a <code>$</code>.</p>\n<h3><a id=\"inject-into-vue-instances\" class=\"anchor\" aria-hidden=\"true\" href=\"#inject-into-vue-instances\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Inject into Vue instances</h3><p>Injecting context into Vue instances works similar to when doing this in standard Vue apps.</p>\n<p><code>plugins/vue-inject.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n\nVue.prototype.$myInjectedFunction = <span class=\"hljs-function\">(<span class=\"hljs-params\">string</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"This is an example\"</span>, string)</code></pre><p><code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-string\">'~/plugins/vue-inject.js'</span>]\n}</code></pre><p>You can now use the function in all your Vue components.</p>\n<p><code>example-component.vue</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  mounted(){\n    <span class=\"hljs-keyword\">this</span>.$myInjectedFunction(<span class=\"hljs-string\">'test'</span>)\n  }\n}</code></pre><h3><a id=\"inject-into-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#inject-into-context\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Inject into context</h3><p>Injecting context into Vue instances works similar to when doing this in standard Vue apps.</p>\n<p><code>plugins/ctx-inject.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ({ app }, inject) =&gt; {\n  <span class=\"hljs-comment\">// Set the function directly on the context.app object</span>\n  app.myInjectedFunction = <span class=\"hljs-function\">(<span class=\"hljs-params\">string</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Okay, another function'</span>, string)\n}</code></pre><p><code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-string\">'~/plugins/ctx-inject.js'</span>]\n}</code></pre><p>The function is now available whenever you have access to the <code>context</code> (for example in <code>asyncData</code> and <code>fetch</code>).</p>\n<p><code>ctx-example-component.vue</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  asyncData(context){\n    context.app.myInjectedFunction(<span class=\"hljs-string\">'ctx!'</span>)\n  }\n}</code></pre><h3><a id=\"combined-inject\" class=\"anchor\" aria-hidden=\"true\" href=\"#combined-inject\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Combined inject</h3><p>If you need the function in the <code>context</code>, Vue instances and maybe even in the Vuex store, you can use the <code>inject</code> function, which is the second parameter of the plugins exported function.</p>\n<p>Injecting content into Vue instances works similar to when doing this in standard Vue apps. The <code>$</code> will be prepended automatically to the function.</p>\n<p><code>plugins/combined-inject.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ({ app }, inject) =&gt; {\n  inject(<span class=\"hljs-string\">'myInjectedFunction'</span>, (string) =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'That was easy!'</span>, string))\n}</code></pre><p><code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-string\">'~/plugins/combined-inject.js'</span>]\n}</code></pre><p>Now the function can be used from <code>context</code>, via <code>this</code> in Vue instances and via <code>this</code> in store <code>actions</code>/<code>mutations</code>.</p>\n<p><code>ctx-example-component.vue</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  mounted(){\n    <span class=\"hljs-keyword\">this</span>.$myInjectedFunction(<span class=\"hljs-string\">'works in mounted'</span>)\n  },\n  asyncData(context){\n    context.app.$myInjectedFunction(<span class=\"hljs-string\">'works with context'</span>)\n  }\n}</code></pre><p><code>store/index.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n  <span class=\"hljs-attr\">someValue</span>: <span class=\"hljs-string\">''</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mutations = {\n  changeSomeValue(state, newValue) {\n    <span class=\"hljs-keyword\">this</span>.$myInjectedFunction(<span class=\"hljs-string\">'accessible in mutations'</span>)\n    state.someValue = newValue\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> actions = {\n  setSomeValueToWhatever ({ commit }) {\n    <span class=\"hljs-keyword\">this</span>.$myInjectedFunction(<span class=\"hljs-string\">'accessible in actions'</span>)\n    <span class=\"hljs-keyword\">const</span> newValue = <span class=\"hljs-string\">\"whatever\"</span>\n    commit(<span class=\"hljs-string\">'changeSomeValue'</span>, newValue)\n  }\n}\n</code></pre><h2><a id=\"client-side-only\" class=\"anchor\" aria-hidden=\"true\" href=\"#client-side-only\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Client-side only</h2><p>Some plugins might work <strong>only in the browser</strong> because they lack SSR support.\nIn these situations you can use the <code>ssr: false</code> option in <code>plugins</code> to add the plugin only on the client-side.</p>\n<p>Example:</p>\n<p><code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">plugins</span>: [\n    { <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">'~/plugins/vue-notifications'</span>, <span class=\"hljs-attr\">ssr</span>: <span class=\"hljs-literal\">false</span> }\n  ]\n}</code></pre><p><code>plugins/vue-notifications.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> VueNotifications <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-notifications'</span>\n\nVue.use(VueNotifications)</code></pre><p>In case you need to import some libraries in a plugin only on <em>server-side</em>, you can check if the <code>process.server</code> variable is set to <code>true</code>.</p>\n<p>Also, if you need to know if you are inside a generated app (via <code>nuxt generate</code>), you can check if <code>process.static</code> is set to <code>true</code>. This is only the case during and after the generation.</p>\n<p>You can also combine both options to hit the spot when a page is being server-rendered by <code>nuxt generate</code> before being saved (<code>process.static &amp;&amp; process.server</code>).</p>\n<p><strong>Note</strong>: Since Nuxt.js 2.4, <code>mode</code> has been introduced as option of <code>plugins</code> to specify plugin type, possible value are: <code>client</code> or <code>server</code>. <code>ssr: false</code> will be adapted to <code>mode: &#39;client&#39;</code> and deprecated in next major release.</p>\n<p>Example:</p>\n<p><code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">plugins</span>: [\n    { <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">'~/plugins/both-sides.js'</span> },\n    { <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">'~/plugins/client-only.js'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'client'</span> },\n    { <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">'~/plugins/server-only.js'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'server'</span> }\n  ]\n}</code></pre><h3><a id=\"name-conventional-plugin\" class=\"anchor\" aria-hidden=\"true\" href=\"#name-conventional-plugin\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Name conventional plugin</h3><p>If plugin is assumed to be run only in client or server side, <code>.client.js</code> or <code>.server.js</code> can be applied as extension of plugin file, the file will be automatically included in corresponding side.</p>\n<p>Example:</p>\n<p><code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-string\">'~/plugins/foo.client.js'</span>, <span class=\"hljs-comment\">// only in client side</span>\n    <span class=\"hljs-string\">'~/plugins/bar.server.js'</span>, <span class=\"hljs-comment\">// only in server side</span>\n    <span class=\"hljs-string\">'~/plugins/baz.js'</span> <span class=\"hljs-comment\">// both client &amp; server</span>\n  ]\n}</code></pre>","docLink":"https://github.com/nuxt/docs/blob/master/en/guide/plugins.md"}]