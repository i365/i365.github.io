[{},{"attrs":{"title":"Vuex Store","description":"Using a store to manage the state is important for every big application. That's why Nuxt.js implements Vuex in its core."},"body":"<blockquote>\n<p>Using a store to manage the state is important for every big application. That&#39;s why Nuxt.js implements <a href=\"https://vuex.vuejs.org/en/\">Vuex</a> in its core.</p>\n</blockquote>\n<div class=\"Promo__Video\">\n  <a href=\"https://vueschool.io/lessons/utilising-the-vuex-store-nuxtjs?friend=nuxt\" target=\"_blank\">\n    <p class=\"Promo__Video__Icon\">\n      Watch a free lesson about <strong>Nuxt.js and Vuex</strong> on Vue School \n    </p>\n  </a>\n</div>\n\n<h2><a id=\"activate-the-store\" class=\"anchor\" aria-hidden=\"true\" href=\"#activate-the-store\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Activate the Store</h2><p>Nuxt.js will look for the <code>store</code> directory, if it exists, it will:</p>\n<ol>\n<li>Import Vuex,</li>\n<li>Add the <code>store</code> option to the root Vue instance.</li>\n</ol>\n<p>Nuxt.js lets you decide between <strong>2 store modes</strong>. You can choose the one you prefer:</p>\n<ul>\n<li><strong>Modules:</strong> every <code>.js</code> file inside the <code>store</code> directory is transformed as a <a href=\"http://vuex.vuejs.org/en/modules.html\">namespaced module</a> (<code>index</code> being the root module).</li>\n<li><strong>Classic (<strong>deprecated</strong>):</strong> <code>store/index.js</code> returns a method to create a store instance.</li>\n</ul>\n<p>Regardless of the mode, your <code>state</code> value should <strong>always be a <code>function</code></strong> to avoid unwanted <em>shared</em> state on the server side.</p>\n<h2><a id=\"modules-mode\" class=\"anchor\" aria-hidden=\"true\" href=\"#modules-mode\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Modules mode</h2><blockquote>\n<p>Nuxt.js lets you have a <code>store</code> directory with every file corresponding to a module.</p>\n</blockquote>\n<p>To get started, simply export the state as a function, and the mutations and actions as objects in <code>store/index.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n  <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mutations = {\n  increment (state) {\n    state.counter++\n  }\n}</code></pre><p>Then, you can have a <code>store/todos.js</code> file:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n  <span class=\"hljs-attr\">list</span>: []\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mutations = {\n  add (state, text) {\n    state.list.push({\n      <span class=\"hljs-attr\">text</span>: text,\n      <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">false</span>\n    })\n  },\n  remove (state, { todo }) {\n    state.list.splice(state.list.indexOf(todo), <span class=\"hljs-number\">1</span>)\n  },\n  toggle (state, todo) {\n    todo.done = !todo.done\n  }\n}</code></pre><p>The store will be created as such:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n    <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span>\n  }),\n  <span class=\"hljs-attr\">mutations</span>: {\n    increment (state) {\n      state.counter++\n    }\n  },\n  <span class=\"hljs-attr\">modules</span>: {\n    <span class=\"hljs-attr\">todos</span>: {\n      <span class=\"hljs-attr\">namespaced</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n        <span class=\"hljs-attr\">list</span>: []\n      }),\n      <span class=\"hljs-attr\">mutations</span>: {\n        add (state, { text }) {\n          state.list.push({\n            text,\n            <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">false</span>\n          })\n        },\n        remove (state, { todo }) {\n          state.list.splice(state.list.indexOf(todo), <span class=\"hljs-number\">1</span>)\n        },\n        toggle (state, { todo }) {\n          todo.done = !todo.done\n        }\n      }\n    }\n  }\n})</code></pre><p>And in your <code>pages/todos.vue</code>, using the <code>todos</code> module:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"todo in todos\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">:checked</span>=<span class=\"hljs-string\">\"todo.done\"</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">\"toggle(todo)\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"{ done: todo.done }\"</span>&gt;</span>{{ todo.text }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"What needs to be done?\"</span> @<span class=\"hljs-attr\">keyup.enter</span>=<span class=\"hljs-string\">\"addTodo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { mapMutations } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">computed</span>: {\n    todos () {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.$store.state.todos.list\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    addTodo (e) {\n      <span class=\"hljs-keyword\">this</span>.$store.commit(<span class=\"hljs-string\">'todos/add'</span>, e.target.value)\n      e.target.value = <span class=\"hljs-string\">''</span>\n    },\n    ...mapMutations({\n      <span class=\"hljs-attr\">toggle</span>: <span class=\"hljs-string\">'todos/toggle'</span>\n    })\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.done</span> {\n  <span class=\"hljs-attribute\">text-decoration</span>: line-through;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><blockquote>\n<p>The module method also works for top-level definitions without implementing a sub-directory in the <code>store</code> directory</p>\n</blockquote>\n<p>Example for state: you create a file <code>store/state.js</code> and add the following</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; ({\n  <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span>\n})</code></pre><p>And the corresponding mutations can be in the file <code>store/mutations.js</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  increment (state) {\n    state.counter++\n  }\n}</code></pre><h3><a id=\"module-files\" class=\"anchor\" aria-hidden=\"true\" href=\"#module-files\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Module files</h3><p>You can optionally break down a module file into separate files: <code>state.js</code>, <code>actions.js</code>, <code>mutations.js</code> and <code>getters.js</code>. If you maintain an <code>index.js</code> file with state, getters and mutations while having a single separate file for actions, that will also still be properly recognized.</p>\n<blockquote>\n<p>Note: Whilst using split-file modules, you must remember that using arrow functions, <code>this</code> is only lexically available. Lexical scoping simply means that the <code>this</code> always references the owner of the arrow function. If the arrow function is not contained then <code>this</code> would be undefined. The solution is to use a &quot;normal&quot; function which produces its own scope and thus has <code>this</code> available.</p>\n</blockquote>\n<h3><a id=\"plugins\" class=\"anchor\" aria-hidden=\"true\" href=\"#plugins\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Plugins</h3><p>You can add additional plugins to the store (in the modules mode) by putting them into the <code>store/index.js</code> file:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> myPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'myPlugin'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> plugins = [ myPlugin ]\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n  <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mutations = {\n  increment (state) {\n    state.counter++\n  }\n}</code></pre><p>More information about the plugins: <a href=\"https://vuex.vuejs.org/en/plugins.html\">Vuex documentation</a>.</p>\n<h2><a id=\"the-fetch-method\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-fetch-method\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The fetch Method</h2><blockquote>\n<p>The <code>fetch</code> method is used to fill the store before rendering the page, it&#39;s like the <code>asyncData</code> method except it doesn&#39;t set the component data.</p>\n</blockquote>\n<p>More information about the fetch method: <a href=\"/api/pages-fetch\">API Pages fetch</a>.</p>\n<h2><a id=\"the-nuxtserverinit-action\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-nuxtserverinit-action\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The nuxtServerInit Action</h2><p>If the action <code>nuxtServerInit</code> is defined in the store, Nuxt.js will call it with the context (only from the server-side). It&#39;s useful when we have some data on the server we want to give directly to the client-side.</p>\n<p>For example, let&#39;s say we have sessions on the server-side and we can access the connected user through <code>req.session.user</code>. To give the authenticated user to our store, we update our <code>store/index.js</code> to the following:</p>\n<pre><code class=\"hljs js\">actions: {\n  nuxtServerInit ({ commit }, { req }) {\n    <span class=\"hljs-keyword\">if</span> (req.session.user) {\n      commit(<span class=\"hljs-string\">'user'</span>, req.session.user)\n    }\n  }\n}</code></pre><blockquote>\n<p>If you are using the <em>Modules</em> mode of the Vuex store, only the primary module (in <code>store/index.js</code>) will receive this action. You&#39;ll need to chain your module actions from there.</p>\n</blockquote>\n<p>The <a href=\"/api/context\">context</a> is given to <code>nuxtServerInit</code> as the 2nd argument, it is the same as <code>asyncData</code> or <code>fetch</code> method.</p>\n<blockquote>\n<p>Note: Asynchronous <code>nuxtServerInit</code> actions must return a Promise or leverage async/await to allow the <code>nuxt</code> server to wait on them.</p>\n</blockquote>\n<pre><code class=\"hljs js\">actions: {\n  <span class=\"hljs-keyword\">async</span> nuxtServerInit({ dispatch }) {\n    <span class=\"hljs-keyword\">await</span> dispatch(<span class=\"hljs-string\">'core/load'</span>)\n  }\n}</code></pre><h2><a id=\"vuex-strict-mode\" class=\"anchor\" aria-hidden=\"true\" href=\"#vuex-strict-mode\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Vuex Strict Mode</h2><p>Strict mode is enabled by default on dev mode and turned off in production mode. To disable strict mode in dev, follow the below example in <code>store/index.js</code>:</p>\n<p><code>export const strict = false</code></p>\n<h2><a id=\"classic-mode\" class=\"anchor\" aria-hidden=\"true\" href=\"#classic-mode\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Classic mode</h2><blockquote>\n<p>This feature is deprecated and will be removed in Nuxt 3.</p>\n</blockquote>\n<p>To activate the store with the classic mode, we create the <code>store/index.js</code> file which should export a method that returns a Vuex instance:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex'</span>\n\n<span class=\"hljs-keyword\">const</span> createStore = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n      <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span>\n    }),\n    <span class=\"hljs-attr\">mutations</span>: {\n      increment (state) {\n        state.counter++\n      }\n    }\n  })\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> createStore</code></pre><blockquote>\n<p>We don&#39;t need to install <code>vuex</code> since it&#39;s shipped with Nuxt.js.</p>\n</blockquote>\n<p>We can now use <code>this.$store</code> inside our components:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"$store.commit('increment')\"</span>&gt;</span>{{ $store.state.counter }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre>","docLink":"https://github.com/nuxt/docs/blob/master/en/guide/vuex-store.md"}]