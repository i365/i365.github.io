[{},{"attrs":{"title":"TypeScript Support","description":"Nuxt.js is shipped with @nuxtjs/typescript module with built-in TypeScript support."},"body":"<blockquote>\n<p>A static type system can help prevent many potential runtime errors, especially as applications grow.</p>\n<p>That&#39;s why Nuxt&#39;s brand new <code>@nuxt/typescript</code> package ships built-in TypeScript tooling support:</p>\n<ul>\n<li>Nuxt official type definitions</li>\n<li>Autocompletion in IDE</li>\n<li>Write everything in TypeScript fashion (<code>layouts</code>, <code>pages</code>, <code>components</code>, <code>plugins</code>, <code>store</code>)</li>\n<li>Runtime TS support (<code>nuxt.config.ts</code>, <code>modules</code>, <code>serverMiddlewares</code>)</li>\n<li>TSX Support</li>\n</ul>\n</blockquote>\n<h2><a id=\"get-started\" class=\"anchor\" aria-hidden=\"true\" href=\"#get-started\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Get started</h2><p>To use TypeScript in your project, install <code>@nuxt/typescript</code> in <code>devDependencies</code> and <code>ts-node</code> in <code>dependencies</code>:</p>\n<pre><code class=\"hljs sh\">npm i -D @nuxt/typescript\nnpm i ts-node\n<span class=\"hljs-comment\"># OR</span>\nyarn add -D @nuxt/typescript\nyarn add ts-node</code></pre><div class=\"Alert Alert--gray\">\n\n<p><strong>INFO:</strong> <code>@nuxt/typescript</code> ships typescript-related dependencies needed to compile TypeScript files &amp; check types in a separate process.</p>\n</div>\n\n<div class=\"Alert Alert--gray\">\n\n<p><strong>INFO:</strong> <code>ts-node</code> extends <code>@nuxt/core</code> to enable runtime TypeScript support for <code>nuxt.config.ts</code> &amp; <code>serverMiddlewares</code>.</p>\n</div>\n\n<p>You&#39;ll also need to create an empty <code>tsconfig.json</code> file in your root project folder, through either a code editor or command line:</p>\n<pre><code class=\"hljs sh\">touch tsconfig.json</code></pre><div class=\"Alert Alert--gray\">\n\n<p><strong>INFO:</strong> The <code>tsconfig.json</code> file will automatically update with default values the first time you run the <code>nuxt</code> command.</p>\n</div>\n\n<h2><a id=\"from-javascript-to-typescript\" class=\"anchor\" aria-hidden=\"true\" href=\"#from-javascript-to-typescript\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>From JavaScript to TypeScript</h2><h3><a id=\"configuration-file\" class=\"anchor\" aria-hidden=\"true\" href=\"#configuration-file\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Configuration file</h3><p>To use TypeScript in your configuration file, all you need to do is rename <code>nuxt.config.js</code> in your root project folder to <code>nuxt.config.ts</code>.</p>\n<p>Nuxt.js also brings type definitions which provides autocompletion and type checking:</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> NuxtConfiguration <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nuxt/config'</span>\n\n<span class=\"hljs-keyword\">const</span> config: NuxtConfiguration = {\n  <span class=\"hljs-comment\">// Type or Press `Ctrl + Space` for autocompletion</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> config</code></pre><h3><a id=\"components\" class=\"anchor\" aria-hidden=\"true\" href=\"#components\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Components</h3><p>For components, we highly advise you to use <a href=\"https://github.com/kaorun343/vue-property-decorator\">vue-property-decorator</a> which depends on <a href=\"https://github.com/vuejs/vue-class-component\">vue-class-component</a>.</p>\n<p>Here is a basic example of mixing a <code>page</code> with a reusable <code>component</code> to display data fetched with Nuxt&#39;s <a href=\"https://nuxtjs.org/guide/async-data\"><code>asyncData</code></a> method.</p>\n<pre><code class=\"hljs ts\"><span class=\"hljs-comment\">/* models/Post.ts */</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">interface</span> Post {\n  id: <span class=\"hljs-built_in\">number</span>\n  title: <span class=\"hljs-built_in\">string</span>\n  description: <span class=\"hljs-built_in\">string</span>\n}</code></pre><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- components/PostPreview.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{{ post.title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ post.description }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { Component, Vue, Prop } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-property-decorator'</span>\n<span class=\"hljs-keyword\">import</span> Post <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'~/models/Post'</span>\n\n@Component\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PostPreview</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Vue</span> </span>{\n  @Prop({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Object</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> }) post!: Post\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- pages/feed.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PostPreview</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"post in posts\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"post.id\"</span> <span class=\"hljs-attr\">:post</span>=<span class=\"hljs-string\">\"post\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"ts\"</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>\n<span class=\"hljs-keyword\">import</span> { Component, Vue } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-property-decorator'</span>\n<span class=\"hljs-keyword\">import</span> Post <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'~/models/Post'</span>\n\n@Component({\n  <span class=\"hljs-attr\">components</span>: {\n    <span class=\"hljs-attr\">PostPreview</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'~/components/PostPreview.vue'</span>)\n  },\n  <span class=\"hljs-keyword\">async</span> asyncData () {\n    <span class=\"hljs-keyword\">let</span> { data } = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">`https://my-api/posts`</span>)\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">posts</span>: data\n    }\n  }\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FeedPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Vue</span> </span>{\n  posts: Post[] = []\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>You can use the exact same logic for <code>layouts</code>.</p>\n<h2><a id=\"linting-with-eslint\" class=\"anchor\" aria-hidden=\"true\" href=\"#linting-with-eslint\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Linting with ESLint</h2><p>If you&#39;re using ESLint to lint your project, here is how you can make ESLint lint your TypeScript files.</p>\n<div class=\"Alert Alert--teal\">\n\n<p><strong>IMPORTANT:</strong> We&#39;re assuming you have already set up <a href=\"https://github.com/nuxt/eslint-config\">nuxt/eslint-config</a> within your project.</p>\n</div>\n\n<p>First, you need to install @typescript-eslint/eslint-plugin and @typescript-eslint/parser (<a href=\"https://github.com/typescript-eslint/typescript-eslint\">GitHub monorepo for typescript-eslint</a>):</p>\n<pre><code class=\"hljs sh\">npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser\n<span class=\"hljs-comment\"># OR</span>\nyarn add -D @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre><p>Then, edit your ESLint configuration <code>.eslintrc.js</code> by adding the <code>@typescript-eslint</code> plugin and making <code>@typescript-eslint/parser</code> the default parser.</p>\n<p>A minimal configuration should look like this:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-string\">'@typescript-eslint'</span>],\n  <span class=\"hljs-attr\">parserOptions</span>: {\n    <span class=\"hljs-attr\">parser</span>: <span class=\"hljs-string\">'@typescript-eslint/parser'</span>\n  },\n  <span class=\"hljs-attr\">extends</span>: [\n    <span class=\"hljs-string\">'@nuxtjs'</span>\n  ],\n  <span class=\"hljs-attr\">rules</span>: {\n    <span class=\"hljs-string\">'@typescript-eslint/no-unused-vars'</span>: <span class=\"hljs-string\">'error'</span>\n  }\n}</code></pre><p>Finally, add or edit the <code>lint</code> script of your <code>package.json</code>:</p>\n<pre><code class=\"hljs json\">\"lint\": \"eslint --ext .ts,.js,.vue --ignore-path .gitignore .\"</code></pre><div class=\"Alert Alert--gray\">\n\n<p><strong>INFO:</strong> The <code>--ignore-path</code> option is useful in preventing ESLint from linting files/folders like <code>node_modules</code>, <code>.nuxt</code> or any others you don&#39;t want to lint.</p>\n</div>\n\n<p>You can now lint your TypeScript files by running <code>npm run lint</code> (or <code>yarn lint</code>).</p>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/guide/typescript.md"}]