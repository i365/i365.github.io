[{},{"attrs":{"title":"Async Data","description":"You may want to fetch data and render it on the server-side. Nuxt.js adds an `asyncData` method to let you handle async operations before setting the component data."},"body":"<blockquote>\n<p>You may want to fetch data and render it on the server-side. Nuxt.js adds an <code>asyncData</code> method to let you handle async operations before initializing the component</p>\n</blockquote>\n<div>\n  <a href=\"https://vueschool.io/courses/async-data-with-nuxtjs?friend=nuxt\" target=\"_blank\" class=\"Promote\">\n    <img src=\"/async-data-with-nuxtjs.png\" srcset=\"/async-data-with-nuxtjs-2x.png 2x\" alt=\"AsyncData by vueschool\"/>\n    <div class=\"Promote__Content\">\n      <h4 class=\"Promote__Content__Title\">Async Data with Nuxt.js</h4>\n      <p class=\"Promote__Content__Description\">Learn how to manage asynchronous data with Nuxt.js.</p>\n      <p class=\"Promote__Content__Signature\">Video courses made by VueSchool to support Nuxt.js development.</p>\n    </div>\n  </a>\n</div>\n\n<h2><a id=\"the-asyncdata-method\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-asyncdata-method\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The asyncData method</h2><p>Sometimes you just want to fetch data and pre-render it on the server without using a store. \n<code>asyncData</code> is called every time before loading the <strong>page</strong> component.\nIt will be called server-side once (on the first request to the Nuxt app) and client-side when navigating to further routes. \nThis method receives <a href=\"/api/context\">the context</a> as the first argument, you can use it to fetch some data and Nuxt.js will merge it with the component data.</p>\n<p>Nuxt.js will automatically merge the returned object with the component data.</p>\n<div class=\"Alert Alert--orange\">\n\n<p>You do <strong>NOT</strong> have access of the component instance through <code>this</code> inside <code>asyncData</code> because it is called <strong>before initiating</strong> the component.</p>\n</div>\n\n<p>Nuxt.js offers you different ways to use <code>asyncData</code>. Choose the one you&#39;re the most familiar with:</p>\n<ol>\n<li>Returning a <code>Promise</code>. Nuxt.js will wait for the promise to be resolved before rendering the component.</li>\n<li>Using the <a href=\"https://javascript.info/async-await\">async/await</a> (<a href=\"https://zeit.co/blog/async-and-await\">learn more about it</a>)</li>\n</ol>\n<div class=\"Alert Alert--grey\">\n\n<p>We are using <a href=\"https://github.com/mzabriskie/axios\">axios</a> to make isomorphic HTTP requests, we <strong>strongly recommend</strong> to use our <a href=\"https://axios.nuxtjs.org/\">axios module</a> for your Nuxt projects.</p>\n</div>\n\n<h3><a id=\"returning-a-promise\" class=\"anchor\" aria-hidden=\"true\" href=\"#returning-a-promise\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Returning a Promise</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  asyncData ({ params }) {\n    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">`https://my-api/posts/<span class=\"hljs-subst\">${params.id}</span>`</span>)\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">title</span>: res.data.title }\n    })\n  }\n}</code></pre><h3><a id=\"using-async-await\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-async-await\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Using async/await</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-keyword\">async</span> asyncData ({ params }) {\n    <span class=\"hljs-keyword\">let</span> { data } = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">`https://my-api/posts/<span class=\"hljs-subst\">${params.id}</span>`</span>)\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">title</span>: data.title }\n  }\n}</code></pre><h3><a id=\"displaying-the-data\" class=\"anchor\" aria-hidden=\"true\" href=\"#displaying-the-data\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Displaying the data</h3><p>The result from asyncData will be <strong>merged</strong> with data.\nYou can display the data inside your template like you&#39;re used to doing:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre><h2><a id=\"the-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#the-context\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>The Context</h2><p>To see the list of available keys in <code>context</code>, take a look at the <a href=\"/api/context\">API Essential <code>context</code></a>.</p>\n<h3><a id=\"use-code-req-code-code-res-code-objects\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-code-req-code-code-res-code-objects\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Use <code>req</code>/<code>res</code> objects</h3><p>When <code>asyncData</code> is called on server side, you have access to the <code>req</code> and <code>res</code> objects of the user request.</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-keyword\">async</span> asyncData ({ req, res }) {\n    <span class=\"hljs-comment\">// Please check if you are on the server side before</span>\n    <span class=\"hljs-comment\">// using req and res</span>\n    <span class=\"hljs-keyword\">if</span> (process.server) {\n     <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">host</span>: req.headers.host }\n    }\n\n    <span class=\"hljs-keyword\">return</span> {}\n  }\n}</code></pre><h3><a id=\"accessing-dynamic-route-data\" class=\"anchor\" aria-hidden=\"true\" href=\"#accessing-dynamic-route-data\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Accessing dynamic route data</h3><p>You can use the <code>context</code> parameter to access dynamic route data as well!\nFor example, dynamic route params can be retrieved using the name of the file or folder that configured it.\nIf you&#39;ve defined a file named <code>_slug.vue</code> in your <code>pages</code> folder, you can access the value via <code>context.params.slug</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-keyword\">async</span> asyncData ({ params }) {\n    <span class=\"hljs-keyword\">const</span> slug = params.slug <span class=\"hljs-comment\">// When calling /abc the slug will be \"abc\"</span>\n    <span class=\"hljs-keyword\">return</span> { slug }\n  }\n}</code></pre><h3><a id=\"listening-to-query-changes\" class=\"anchor\" aria-hidden=\"true\" href=\"#listening-to-query-changes\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Listening to query changes</h3><p>The <code>asyncData</code> method <strong>is not called</strong> on query string changes by default.\nIf you want to change this behavior, for example when building a pagination component,\nyou can set up parameters that should be listened to with the <code>watchQuery</code> property of your page component.\nLearn more on the <a href=\"/api/pages-watchquery\">API <code>watchQuery</code> page</a> page.</p>\n<h2><a id=\"handling-errors\" class=\"anchor\" aria-hidden=\"true\" href=\"#handling-errors\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Handling Errors</h2><p>Nuxt.js adds the <code>error(params)</code> method in the <code>context</code>, which you can call to display the error page. <code>params.statusCode</code> will be also used to render the proper status code from the server-side.</p>\n<p>Example with a <code>Promise</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  asyncData ({ params, error }) {\n    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">`https://my-api/posts/<span class=\"hljs-subst\">${params.id}</span>`</span>)\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">title</span>: res.data.title }\n    })\n    .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n      error({ <span class=\"hljs-attr\">statusCode</span>: <span class=\"hljs-number\">404</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Post not found'</span> })\n    })\n  }\n}</code></pre><p>To customize the error page, take a look at the <a href=\"/guide/views#layouts\">views guide</a> .</p>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/guide/async-data.md"}]