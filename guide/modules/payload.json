[{},{"attrs":{"title":"Modules","description":"Modules are Nuxt.js extensions which can extend its core functionality and add endless integrations."},"body":"<blockquote>\n<p>Modules are Nuxt.js extensions which can extend its core functionality and add endless integrations.</p>\n</blockquote>\n<h2><a id=\"introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Introduction</h2><p>While developing production-grade applications with Nuxt, you&#39;ll soon discover that the framework&#39;s core\nfunctionality is not enough. Nuxt can be extended with configuration options and plugins,\nbut maintaining these customizations across multiple projects is tedious, repetitive and time-consuming.\nOn the other hand, supporting every project&#39;s needs out of the box would make Nuxt very complex and hard to use.</p>\n<p>This is one of the reasons why Nuxt provides a higher-order module system that makes it easy to extend the core.\nModules are simply <strong>functions</strong> that are called sequentially when booting Nuxt.\nThe framework waits for each module to finish before continuing.\nIn this way, modules can customize almost any aspect of Nuxt.\nThanks to Nuxt&#39;s modular design (based on webpack&#39;s <a href=\"https://github.com/webpack/tapable\">Tapable</a>),\nmodules can easily register hooks for certain entry points like the builder initialization.\nModules can also override templates, configure webpack loaders, add CSS libraries, and perform many other useful tasks.</p>\n<p>Best of all, Nuxt modules can be incorporated into npm packages.\nThis makes them easy to reuse across projects and to share with the Nuxt community,\nhelping create an ecosystem of high-quality Nuxt add-ons.</p>\n<p>Modules are great if you:</p>\n<ul>\n<li>Are a member of an <strong>agile team</strong> that needs to quickly bootstrap new projects.</li>\n<li>Are tired of <strong>re-inventing</strong> the wheel for common tasks like integrating Google Analytics.</li>\n<li>Are a lovely <strong>Open Source</strong> enthusiast who would like to easily <strong>share</strong> your work with the community.</li>\n<li>Are a member of an <strong>enterprise</strong> company that values <strong>quality</strong> and <strong>reusability</strong>.</li>\n<li>Are often up against short deadlines and don&#39;t have time to dig into the details of every new library or integration.</li>\n<li>Are tired of dealing with breaking changes to low-level interfaces, and need things that <strong>just workâ„¢</strong>.</li>\n</ul>\n<h2><a id=\"list-of-nuxt-js-modules\" class=\"anchor\" aria-hidden=\"true\" href=\"#list-of-nuxt-js-modules\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>List of Nuxt.js modules</h2><p>The Nuxt.js team offers <strong>official</strong> modules:</p>\n<ul>\n<li><a href=\"https://http.nuxtjs.org\">@nuxt/http</a>: Light and universal way to make HTTP requests, based on <a href=\"https://github.com/sindresorhus/ky-universal\">ky-universal</a></li>\n<li><a href=\"https://axios.nuxtjs.org\">@nuxtjs/axios</a>: Secure and Easy Axios integration with Nuxt.js to make HTTP requests</li>\n<li><a href=\"https://pwa.nuxtjs.org\">@nuxtjs/pwa</a>: Supercharge Nuxt with a heavily tested, updated and stable PWA solution</li>\n<li><a href=\"https://auth.nuxtjs.org\">@nuxtjs/auth</a>: Authentication module for Nuxt.js, offering different schemes and strategies</li>\n</ul>\n<p>A list of Nuxt.js modules made by the community is available on <a href=\"https://github.com/topics/nuxt-module\">https://github.com/topics/nuxt-module</a></p>\n<h2><a id=\"write-a-basic-module\" class=\"anchor\" aria-hidden=\"true\" href=\"#write-a-basic-module\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Write a basic Module</h2><p>As already mentioned modules are just simple functions. They can be packaged as npm modules or directly included in project source code.</p>\n<p><strong>modules/simple.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SimpleModule</span> (<span class=\"hljs-params\">moduleOptions</span>) </span>{\n  <span class=\"hljs-comment\">// Write your code here</span>\n}\n\n<span class=\"hljs-comment\">// REQUIRED if publishing the module as npm package</span>\n<span class=\"hljs-comment\">// module.exports.meta = require('./package.json')</span></code></pre><p><strong><code>moduleOptions</code></strong></p>\n<p>This is the object passed using <code>modules</code> array by user we can use it to customize it&#39;s behavior.</p>\n<p><strong><code>this.options</code></strong></p>\n<p>You can directly access Nuxt options using this reference. This is the content of the user&#39;s <code>nuxt.config.js</code> with all default options assigned to. It can be used for shared options between modules.</p>\n<p><strong><code>this.nuxt</code></strong></p>\n<p>This is a reference to current Nuxt instance. Refer to <a href=\"/api/internals-nuxt\">Nuxt class docs for available methods</a>.</p>\n<p><strong><code>this</code></strong></p>\n<p>Context of modules. Please look into the <a href=\"/api/internals-module-container\">ModuleContainer</a> class docs for available methods.</p>\n<p><strong><code>module.exports.meta</code></strong></p>\n<p>This line is <strong>required</strong> if you are publishing module as an npm package. Nuxt internally uses meta to work better with your package.</p>\n<p><strong>nuxt.config.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">modules</span>: [\n    <span class=\"hljs-comment\">// Simple usage</span>\n    <span class=\"hljs-string\">'~/modules/simple'</span>\n\n    <span class=\"hljs-comment\">// Passing options directly</span>\n    [<span class=\"hljs-string\">'~/modules/simple'</span>, { <span class=\"hljs-attr\">token</span>: <span class=\"hljs-string\">'123'</span> }]\n  ]\n}</code></pre><p>We then tell Nuxt to load some specific modules for a project with optional parameters as options.\nPlease refer to <a href=\"/api/configuration-modules\">modules configuration</a> docs for more info!</p>\n<h2><a id=\"async-modules\" class=\"anchor\" aria-hidden=\"true\" href=\"#async-modules\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Async Modules</h2><p>Not all modules will do everything synchronous. For example you may want to develop a module which needs fetching some API or doing async IO. For this, Nuxt supports async modules which can return a Promise or call a callback.</p>\n<h3><a id=\"use-async-await\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-async-await\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Use async/await</h3><div class=\"Alert Alert--orange\">\n\n<p>Be aware that <code>async</code>/<code>await</code> is only supported in Node.js &gt; 7.2. So if you are a module developer at least warn users about that if using them. For heavily async modules or better legacy support you can use either a bundler to transform it for older Node.js compatibility or a promise method.</p>\n</div>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> fse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs-extra'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">asyncModule</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// You can do async works here using `async`/`await`</span>\n  <span class=\"hljs-keyword\">let</span> pages = <span class=\"hljs-keyword\">await</span> fse.readJson(<span class=\"hljs-string\">'./pages.json'</span>)\n}</code></pre><h3><a id=\"return-a-promise\" class=\"anchor\" aria-hidden=\"true\" href=\"#return-a-promise\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Return a Promise</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">asyncModule</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">'https://jsonplaceholder.typicode.com/users'</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.data.map(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> <span class=\"hljs-string\">'/users/'</span> + user.username))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">routes</span> =&gt;</span> {\n      <span class=\"hljs-comment\">// Do something by extending Nuxt routes</span>\n    })\n}</code></pre><h2><a id=\"common-snippets\" class=\"anchor\" aria-hidden=\"true\" href=\"#common-snippets\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Common Snippets</h2><h3><a id=\"top-level-options\" class=\"anchor\" aria-hidden=\"true\" href=\"#top-level-options\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Top level options</h3><p>Sometimes it is more convenient if we can use top level options while registering modules in <code>nuxt.config.js</code>.\nThis allows us to combine multiple option sources.</p>\n<p><strong>nuxt.config.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">modules</span>: [\n    [<span class=\"hljs-string\">'@nuxtjs/axios'</span>, { <span class=\"hljs-attr\">anotherOption</span>: <span class=\"hljs-literal\">true</span> }]\n  ],\n\n  <span class=\"hljs-comment\">// axios module is aware of this by using `this.options.axios`</span>\n  axios: {\n    option1,\n    option2\n  }\n}</code></pre><p><strong>module.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">moduleOptions</span>) </span>{\n  <span class=\"hljs-comment\">// `options` will contain option1, option2 and anotherOption</span>\n  <span class=\"hljs-keyword\">const</span> options = <span class=\"hljs-built_in\">Object</span>.assign({}, <span class=\"hljs-keyword\">this</span>.options.axios, moduleOptions)\n\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre><h3><a id=\"provide-plugins\" class=\"anchor\" aria-hidden=\"true\" href=\"#provide-plugins\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Provide plugins</h3><p>It is common that modules provide one or more plugins when added.\nFor example <a href=\"https://bootstrap-vue.js.org\">bootstrap-vue</a> module would require to register itself into Vue.\nIn such situations we can use the <code>this.addPlugin</code> helper.</p>\n<p><strong>plugin.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> BootstrapVue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'bootstrap-vue/dist/bootstrap-vue.esm'</span>\n\nVue.use(BootstrapVue)</code></pre><p><strong>module.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nuxtBootstrapVue</span> (<span class=\"hljs-params\">moduleOptions</span>) </span>{\n  <span class=\"hljs-comment\">// Register `plugin.js` template</span>\n  <span class=\"hljs-keyword\">this</span>.addPlugin(path.resolve(__dirname, <span class=\"hljs-string\">'plugin.js'</span>))\n}</code></pre><h3><a id=\"template-plugins\" class=\"anchor\" aria-hidden=\"true\" href=\"#template-plugins\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Template plugins</h3><p>Registered templates and plugins can leverage <a href=\"https://lodash.com/docs/4.17.4#template\">lodash templates</a> to conditionally change registered plugins output.</p>\n<p><strong>plugin.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Set Google Analytics UA</span>\nga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'&lt;%= options.ua %&gt;'</span>, <span class=\"hljs-string\">'auto'</span>)\n\n&lt;% <span class=\"hljs-keyword\">if</span> (options.debug) { %&gt;\n<span class=\"hljs-comment\">// Dev only code</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%</span> } %&gt;</span></span></code></pre><p><strong>module.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nuxtBootstrapVue</span> (<span class=\"hljs-params\">moduleOptions</span>) </span>{\n  <span class=\"hljs-comment\">// Register `plugin.js` template</span>\n  <span class=\"hljs-keyword\">this</span>.addPlugin({\n    <span class=\"hljs-attr\">src</span>: path.resolve(__dirname, <span class=\"hljs-string\">'plugin.js'</span>),\n    <span class=\"hljs-attr\">options</span>: {\n      <span class=\"hljs-comment\">// Nuxt will replace `options.ua` with `123` when copying plugin to project</span>\n      ua: <span class=\"hljs-number\">123</span>,\n\n      <span class=\"hljs-comment\">// conditional parts with dev will be stripped from plugin code on production builds</span>\n      debug: <span class=\"hljs-keyword\">this</span>.options.dev\n    }\n  })\n}</code></pre><h3><a id=\"add-a-css-library\" class=\"anchor\" aria-hidden=\"true\" href=\"#add-a-css-library\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Add a CSS library</h3><p>If your module will provide a CSS library, make sure to perform a check if the user already included the library to avoid duplicates, and add <strong>an option to disable</strong> the CSS library in the module.</p>\n<p><strong>module.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">moduleOptions</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (moduleOptions.fontAwesome !== <span class=\"hljs-literal\">false</span>) {\n    <span class=\"hljs-comment\">// Add Font Awesome</span>\n    <span class=\"hljs-keyword\">this</span>.options.css.push(<span class=\"hljs-string\">'font-awesome/css/font-awesome.css'</span>)\n  }\n}</code></pre><h3><a id=\"emit-assets\" class=\"anchor\" aria-hidden=\"true\" href=\"#emit-assets\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Emit assets</h3><!-- todo: up2date? -->\n\n<p>We can register webpack plugins to emit assets during build.</p>\n<p><strong>module.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">moduleOptions</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> info = <span class=\"hljs-string\">'Built by awesome module - 1.3 alpha on '</span> + <span class=\"hljs-built_in\">Date</span>.now()\n\n  <span class=\"hljs-keyword\">this</span>.options.build.plugins.push({\n    apply (compiler) {\n      compiler.plugin(<span class=\"hljs-string\">'emit'</span>, (compilation, cb) =&gt; {\n\n        <span class=\"hljs-comment\">// This will generate `.nuxt/dist/info.txt' with contents of info variable.</span>\n        <span class=\"hljs-comment\">// Source can be buffer too</span>\n        compilation.assets[<span class=\"hljs-string\">'info.txt'</span>] = { <span class=\"hljs-attr\">source</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> info, <span class=\"hljs-attr\">size</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> info.length }\n\n        cb()\n      })\n    }\n  })\n}</code></pre><h3><a id=\"register-custom-webpack-loaders\" class=\"anchor\" aria-hidden=\"true\" href=\"#register-custom-webpack-loaders\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Register custom webpack loaders</h3><p>We can do the same as <code>build.extend</code> in <code>nuxt.config.js</code> using <code>this.extendBuild</code>.</p>\n<p><strong>module.js</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">moduleOptions</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.extendBuild(<span class=\"hljs-function\">(<span class=\"hljs-params\">config, { isClient, isServer }</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// `.foo` Loader</span>\n      config.module.rules.push({\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.foo$/</span>,\n        <span class=\"hljs-attr\">use</span>: [...]\n      })\n\n      <span class=\"hljs-comment\">// Customize existing loaders</span>\n      <span class=\"hljs-comment\">// Refer to source code for Nuxt internals:</span>\n      <span class=\"hljs-comment\">// https://github.com/nuxt/nuxt.js/tree/dev/packages/builder/src/webpack/base.js</span>\n      <span class=\"hljs-keyword\">const</span> barLoader = config.module.rules.find(<span class=\"hljs-function\"><span class=\"hljs-params\">rule</span> =&gt;</span> rule.loader === <span class=\"hljs-string\">'bar-loader'</span>)\n  })\n}</code></pre><h2><a id=\"run-tasks-on-specific-hooks\" class=\"anchor\" aria-hidden=\"true\" href=\"#run-tasks-on-specific-hooks\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Run Tasks on Specific hooks</h2><p>Your module may need to do things only on specific conditions and not just during Nuxt initialization.\nWe can use the powerful <a href=\"https://github.com/nuxt/nuxt.js/blob/dev/packages/core/src/hookable.js\">Hookable</a> Nuxt.js system to do tasks on specific events.\nNuxt will wait for your function if it return a Promise or is defined as <code>async</code>.</p>\n<p>Here are some basic examples:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myModule</span>(<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">this</span>.nuxt.hook(<span class=\"hljs-string\">'modules:done'</span>, moduleContainer =&gt; {\n    <span class=\"hljs-comment\">// This will be called when all modules finished loading</span>\n  })\n\n  <span class=\"hljs-keyword\">this</span>.nuxt.hook(<span class=\"hljs-string\">'render:before'</span>, renderer =&gt; {\n    <span class=\"hljs-comment\">// Called after the renderer was created</span>\n  })\n\n  <span class=\"hljs-keyword\">this</span>.nuxt.hook(<span class=\"hljs-string\">'build:compile'</span>, <span class=\"hljs-keyword\">async</span> ({name, compiler }) =&gt; {\n    <span class=\"hljs-comment\">// Called before the compiler (default: webpack) starts</span>\n  })\n\n  <span class=\"hljs-keyword\">this</span>.nuxt.hook(<span class=\"hljs-string\">'generate:before'</span>, <span class=\"hljs-keyword\">async</span> generator =&gt; {\n    <span class=\"hljs-comment\">// This will be called before Nuxt generates your pages</span>\n  })\n}</code></pre><h2><a id=\"module-package-commands\" class=\"anchor\" aria-hidden=\"true\" href=\"#module-package-commands\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Module package commands</h2><p><strong>Experimental</strong></p>\n<p>Starting in <code>v2.4.0</code>, you can add custom nuxt commands through a Nuxt module&#39;s package. To do so, you must follow the <code>NuxtCommand</code> API when defining your command. A simple example hypothetically placed in <code>my-module/bin/command.js</code> looks like this:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-meta\">#!/usr/bin/env node</span>\n\n<span class=\"hljs-keyword\">const</span> consola = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'consola'</span>)\n<span class=\"hljs-keyword\">const</span> { NuxtCommand } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@nuxt/cli'</span>)\n\nNuxtCommand.run({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'command'</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'My Module Command'</span>,\n  <span class=\"hljs-attr\">usage</span>: <span class=\"hljs-string\">'command &lt;foobar&gt;'</span>,\n  <span class=\"hljs-attr\">options</span>: {\n    <span class=\"hljs-attr\">foobar</span>: {\n      <span class=\"hljs-attr\">alias</span>: <span class=\"hljs-string\">'fb'</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'string'</span>,\n      <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">'Simple test string'</span>\n    }\n  },\n  run(cmd) {\n    consola.info(cmd.argv)\n  }\n})</code></pre><p>A few things of note here. First, notice the call to <code>/usr/bin/env</code> to retrieve the Node executable. Also notice that ES module syntax can&#39;t be used for commands unless you manually incorporate <a href=\"https://github.com/standard-things/esm\"><code>esm</code></a> into your code.</p>\n<p>Next, you&#39;ll notice how <code>NuxtCommand.run()</code> is used to specify the settings and behavior of the command. Options are defined in <code>options</code>, which get parsed via <a href=\"https://github.com/substack/minimist\"><code>minimist</code></a>.\nOnce arguments are parsed, <code>run()</code> is automatically called with the <code>NuxtCommand</code> instance as first parameter.</p>\n<p>In the example above, <code>cmd.argv</code> is used to retrieve parsed command-line arguments. There are more methods and properties in <code>NuxtCommand</code> -- documentation on them will be provided as this feature is further tested and improved.</p>\n<p>To make your command recognizable by the Nuxt CLI, list it under the <code>bin</code> section of your package.json, using the <code>nuxt-module</code> convention, where <code>module</code> relates to your package&#39;s name. With this central binary, you can use <code>argv</code> to further parse more <code>subcommands</code> for your command if you desire.</p>\n<pre><code class=\"hljs js\">{\n  <span class=\"hljs-string\">\"bin\"</span>: {\n    <span class=\"hljs-string\">\"nuxt-foobar\"</span>: <span class=\"hljs-string\">\"./bin/command.js\"</span>\n  }\n}</code></pre><p>Once your package is installed (via NPM or Yarn), you&#39;ll be able to execute <code>nuxt foobar ...</code> on the command-line.</p>\n<div class=\"Alert\">\n\n<p>There are way more hooks and possibilities for modules. Please read the <a href=\"/api/internals\">Nuxt Internals</a> to find out more about the nuxt-internal API.</p>\n</div>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/guide/modules.md"}]