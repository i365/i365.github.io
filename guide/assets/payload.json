[{},{"attrs":{"title":"Assets","description":"By default, Nuxt uses vue-loader, file-loader and url-loader webpack loaders for strong assets serving. You can also use Static directory for static assets."},"body":"<blockquote>\n<p>By default, Nuxt uses vue-loader, file-loader and url-loader webpack loaders for strong assets serving. You can also use the <code>static</code> directory for static assets.</p>\n</blockquote>\n<h2><a id=\"webpack\" class=\"anchor\" aria-hidden=\"true\" href=\"#webpack\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Webpack</h2><p><a href=\"http://vue-loader.vuejs.org/\">vue-loader</a> automatically processes your style and template files with <code>css-loader</code> and the Vue template compiler out of the box.\nIn this compilation process, all asset URLs such as <code>&lt;img src=&quot;...&quot;&gt;</code>, <code>background: url(...)</code> and CSS <code>@import</code> are resolved as module dependencies.</p>\n<p>For example, we have this file tree:</p>\n<pre><code class=\"hljs bash\">-| assets/\n----| image.png\n-| pages/\n----| index.vue</code></pre><p>If you use <code>url(&#39;~assets/image.png&#39;)</code> in your CSS, it will be <em>translated</em> into <code>require(&#39;~/assets/image.png&#39;)</code>.</p>\n<div class=\"Alert Alert--orange\">\n\n<p><strong>Warning:</strong> Starting from Nuxt 2.0 the <code>~/</code> alias won&#39;t be resolved correctly in your CSS files.\nYou must use <code>~assets</code> (without a slash) or the <code>@</code> alias in <code>url</code> CSS references, i.e. <code>background: url(&quot;~assets/banner.svg&quot;)</code></p>\n</div>\n\n\n<p>Or if you reference that image in your <code>pages/index.vue</code>:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"~/assets/image.png\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre><p>It will be compiled into:</p>\n<pre><code class=\"hljs js\">createElement(<span class=\"hljs-string\">'img'</span>, { <span class=\"hljs-attr\">attrs</span>: { <span class=\"hljs-attr\">src</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'~/assets/image.png'</span>) }})</code></pre><p>Because <code>.png</code> is not a JavaScript file, Nuxt.js configures webpack to use <a href=\"https://github.com/webpack/file-loader\">file-loader</a> and <a href=\"https://github.com/webpack/url-loader\">url-loader</a> to handle them for you.</p>\n<p>The benefits of these loaders are:</p>\n<ul>\n<li><code>file-loader</code> lets you designate where to copy and place the asset file, and how to name it using version hashes for better caching. In production, you will benefit from long-term caching by default!</li>\n<li><code>url-loader</code> allows you to conditionally inline a file as base-64 data URL if they are smaller than a given threshold. This can reduce a number of HTTP requests for trivial files. If the file is larger than the threshold, it automatically falls back to file-loader.</li>\n</ul>\n<p>For those two loaders, the default configuration is:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// https://github.com/nuxt/nuxt.js/blob/dev/packages/webpack/src/config/base.js#L297-L316</span>\n[\n  {\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg|webp)$/</span>,\n    <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'url-loader'</span>,\n    <span class=\"hljs-attr\">query</span>: {\n      <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">1000</span>, <span class=\"hljs-comment\">// 1kB</span>\n      name: <span class=\"hljs-string\">'img/[name].[hash:7].[ext]'</span>\n    }\n  },\n  {\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,\n    <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'url-loader'</span>,\n    <span class=\"hljs-attr\">query</span>: {\n      <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">1000</span>, <span class=\"hljs-comment\">// 1kB</span>\n      name: <span class=\"hljs-string\">'fonts/[name].[hash:7].[ext]'</span>\n    }\n  }\n]</code></pre><p>Which means that every file below 1 KB will be inlined as base-64 data URL.\nOtherwise, the image/font will be copied in its corresponding folder (under the <code>.nuxt</code> directory)\nwith a name containing a version hash for better caching.</p>\n<p>When launching our application with <code>nuxt</code>, our template in <code>pages/index.vue</code>:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"~/assets/image.png\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></code></pre><p>Will be transformed into:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/_nuxt/img/image.0c61159.png\"</span>&gt;</span></code></pre><p>If you want to change the loader configurations, please use <a href=\"/api/configuration-build#extend\">build.extend</a>.</p>\n<h2><a id=\"static\" class=\"anchor\" aria-hidden=\"true\" href=\"#static\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Static</h2><p>If you don&#39;t want to use Webpack assets from the <code>assets</code> directory, you can create and use the <code>static</code> directory (in your project root folder).</p>\n<p>All included files will be automatically served by Nuxt and are accessible through your project root URL. (<code>static/favicon.ico</code> will be available at <code>localhost:3000/favicon.ico</code>)</p>\n<p>This option is helpful for files like <code>robots.txt</code>, <code>sitemap.xml</code> or <code>CNAME</code> (which is important for GitHub Pages deployment).</p>\n<p>In your code, you can then reference these files relative to the root (<code>/</code>):</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Static image from static directory --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/my-image.png\"</span>/&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- webpacked image from assets directory --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"~/assets/my-image-2.png\"</span>/&gt;</span></code></pre>","docLink":"https://github.com/nuxt/docs/blob/master/en/guide/assets.md"}]