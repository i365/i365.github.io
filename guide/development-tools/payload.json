[{},{"attrs":{"title":"Development Tools","description":"Nuxt.js helps you to make your web development enjoyable."},"body":"<blockquote>\n<p>Testing your application is part of the web development. Nuxt.js helps you to make it as easy as possible.</p>\n</blockquote>\n<h2><a id=\"end-to-end-testing\" class=\"anchor\" aria-hidden=\"true\" href=\"#end-to-end-testing\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>End-to-End Testing</h2><p><a href=\"https://github.com/avajs/ava\">AVA</a> is a powerful JavaScript testing framework, mixed with <a href=\"https://github.com/tmpvar/jsdom\">jsdom</a>, we can use them to do end-to-end testing easily.</p>\n<p>First, we need to add AVA and jsdom as development dependencies:</p>\n<pre><code class=\"hljs bash\">npm install --save-dev ava jsdom</code></pre><p>Then add a test script to our <code>package.json</code> and configure AVA to compile files that we import into our tests.</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-string\">\"scripts\"</span>: {\n  <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"ava\"</span>,\n},\n<span class=\"hljs-string\">\"ava\"</span>: {\n  <span class=\"hljs-string\">\"require\"</span>: [\n    <span class=\"hljs-string\">\"babel-register\"</span>\n  ]\n},\n<span class=\"hljs-string\">\"babel\"</span>: {\n  <span class=\"hljs-string\">\"presets\"</span>: [\n    <span class=\"hljs-string\">\"env\"</span>\n  ]\n}</code></pre><p>We are going to write our tests in the <code>test</code> folder:</p>\n<pre><code class=\"hljs bash\">mkdir <span class=\"hljs-built_in\">test</span></code></pre><p>Let&#39;s say we have a page in <code>pages/index.vue</code>:</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red\"</span>&gt;</span>Hello {{ name }}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data () {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'world'</span> }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.red</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><p>When we launch our app with <code>npm run dev</code> and open <a href=\"http://localhost:3000\">http://localhost:3000</a>, we can see our red <code>Hello world!</code> title.</p>\n<p>We add our test file <code>test/index.test.js</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> test <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ava'</span>\n<span class=\"hljs-keyword\">import</span> { Nuxt, Builder } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'nuxt'</span>\n<span class=\"hljs-keyword\">import</span> { resolve } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>\n\n<span class=\"hljs-comment\">// We keep a reference to Nuxt so we can close</span>\n<span class=\"hljs-comment\">// the server at the end of the test</span>\n<span class=\"hljs-keyword\">let</span> nuxt = <span class=\"hljs-literal\">null</span>\n\n<span class=\"hljs-comment\">// Init Nuxt.js and start listening on localhost:4000</span>\ntest.before(<span class=\"hljs-string\">'Init Nuxt.js'</span>, <span class=\"hljs-keyword\">async</span> t =&gt; {\n  <span class=\"hljs-keyword\">const</span> rootDir = resolve(__dirname, <span class=\"hljs-string\">'..'</span>)\n  <span class=\"hljs-keyword\">let</span> config = {}\n  <span class=\"hljs-keyword\">try</span> { config = <span class=\"hljs-built_in\">require</span>(resolve(rootDir, <span class=\"hljs-string\">'nuxt.config.js'</span>)) } <span class=\"hljs-keyword\">catch</span> (e) {}\n  config.rootDir = rootDir <span class=\"hljs-comment\">// project folder</span>\n  config.dev = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// production build</span>\n  config.mode = <span class=\"hljs-string\">'universal'</span> <span class=\"hljs-comment\">// Isomorphic application</span>\n  nuxt = <span class=\"hljs-keyword\">new</span> Nuxt(config)\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> Builder(nuxt).build()\n  nuxt.listen(<span class=\"hljs-number\">4000</span>, <span class=\"hljs-string\">'localhost'</span>)\n})\n\n<span class=\"hljs-comment\">// Example of testing only generated html</span>\ntest(<span class=\"hljs-string\">'Route / exits and render HTML'</span>, <span class=\"hljs-keyword\">async</span> t =&gt; {\n  <span class=\"hljs-keyword\">let</span> context = {}\n  <span class=\"hljs-keyword\">const</span> { html } = <span class=\"hljs-keyword\">await</span> nuxt.renderRoute(<span class=\"hljs-string\">'/'</span>, context)\n  t.true(html.includes(<span class=\"hljs-string\">'&lt;h1 class=\"red\"&gt;Hello world!&lt;/h1&gt;'</span>))\n})\n\n<span class=\"hljs-comment\">// Example of testing via DOM checking</span>\ntest(<span class=\"hljs-string\">'Route / exists and renders HTML with CSS applied'</span>, <span class=\"hljs-keyword\">async</span> t =&gt; {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">window</span> = <span class=\"hljs-keyword\">await</span> nuxt.renderAndGetWindow(<span class=\"hljs-string\">'http://localhost:4000/'</span>)\n  <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-built_in\">window</span>.document.querySelector(<span class=\"hljs-string\">'.red'</span>)\n  t.not(element, <span class=\"hljs-literal\">null</span>)\n  t.is(element.textContent, <span class=\"hljs-string\">'Hello world!'</span>)\n  t.is(element.className, <span class=\"hljs-string\">'red'</span>)\n  t.is(<span class=\"hljs-built_in\">window</span>.getComputedStyle(element).color, <span class=\"hljs-string\">'red'</span>)\n})\n\n<span class=\"hljs-comment\">// Close the Nuxt server</span>\ntest.after(<span class=\"hljs-string\">'Closing server'</span>, t =&gt; {\n  nuxt.close()\n})</code></pre><p>We can now launch our tests:</p>\n<pre><code class=\"hljs bash\">npm <span class=\"hljs-built_in\">test</span></code></pre><p>jsdom has some limitations because it does not use a browser. However, it will cover most of our tests. If you want to use a browser to test your application, you might want to check out <a href=\"http://nightwatchjs.org\">Nightwatch.js</a>.</p>\n<h2><a id=\"eslint-and-prettier\" class=\"anchor\" aria-hidden=\"true\" href=\"#eslint-and-prettier\"><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-link\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>ESLint and Prettier</h2><blockquote>\n<p><a href=\"http://eslint.org\">ESLint</a> is a great tool to keep your code clean.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://prettier.io\">Prettier</a> is a very popular code formatter.</p>\n</blockquote>\n<p>You can add ESLint with Prettier pretty easily with Nuxt.js, first, you need to add the npm dependencies:</p>\n<pre><code class=\"hljs bash\">npm install --save-dev babel-eslint eslint eslint-config-prettier eslint-loader eslint-plugin-vue eslint-plugin-prettier prettier</code></pre><p>Then, you can configure ESLint via a <code>.eslintrc.js</code> file in your root project directory:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">root</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">env</span>: {\n    <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">node</span>: <span class=\"hljs-literal\">true</span>\n  },\n  <span class=\"hljs-attr\">parserOptions</span>: {\n    <span class=\"hljs-attr\">parser</span>: <span class=\"hljs-string\">'babel-eslint'</span>\n  },\n  <span class=\"hljs-attr\">extends</span>: [\n    <span class=\"hljs-string\">\"eslint:recommended\"</span>,\n    <span class=\"hljs-comment\">// https://github.com/vuejs/eslint-plugin-vue#priority-a-essential-error-prevention</span>\n    <span class=\"hljs-comment\">// consider switching to `plugin:vue/strongly-recommended` or `plugin:vue/recommended` for stricter rules.</span>\n    <span class=\"hljs-string\">\"plugin:vue/recommended\"</span>,\n    <span class=\"hljs-string\">\"plugin:prettier/recommended\"</span>\n  ],\n  <span class=\"hljs-comment\">// required to lint *.vue files</span>\n  plugins: [\n    <span class=\"hljs-string\">'vue'</span>\n  ],\n  <span class=\"hljs-comment\">// add your custom rules here</span>\n  rules: {\n    <span class=\"hljs-string\">\"semi\"</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"never\"</span>],\n    <span class=\"hljs-string\">\"no-console\"</span>: <span class=\"hljs-string\">\"off\"</span>,\n    <span class=\"hljs-string\">\"vue/max-attributes-per-line\"</span>: <span class=\"hljs-string\">\"off\"</span>,\n    <span class=\"hljs-string\">\"prettier/prettier\"</span>: [<span class=\"hljs-string\">\"error\"</span>, { <span class=\"hljs-string\">\"semi\"</span>: <span class=\"hljs-literal\">false</span> }]\n  }\n}</code></pre><p>Then, you can add <code>lint</code> and <code>lintfix</code> scripts to your <code>package.json</code>:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"scripts\"</span>: {\n  <span class=\"hljs-string\">\"lint\"</span>: <span class=\"hljs-string\">\"eslint --ext .js,.vue --ignore-path .gitignore .\"</span>,\n  <span class=\"hljs-string\">\"lintfix\"</span>: <span class=\"hljs-string\">\"eslint --fix --ext .js,.vue --ignore-path .gitignore .\"</span>\n}</code></pre><p>You can now launch <code>lint</code> to check for errors:</p>\n<pre><code class=\"hljs bash\">npm run lint</code></pre><p>or <code>lintfix</code> to also fix those which are doable</p>\n<pre><code class=\"hljs bash\">npm run lintfix</code></pre><p>ESLint will lint all of your JavaScript and Vue files while ignoring your ignored files defined in your <code>.gitignore</code>.</p>\n<p>It is also recommended to enable ESLint hot reloading mode via webpack. This way ESLint will run on save during <code>npm run dev</code>. Just add the following to your <code>nuxt.config.js</code>:</p>\n<pre><code class=\"hljs js\">...\n  <span class=\"hljs-comment\">/*\n   ** Build configuration\n  */</span>\n  build: {\n   <span class=\"hljs-comment\">/*\n    ** You can extend webpack config here\n   */</span>\n   extend(config, ctx) {\n      <span class=\"hljs-comment\">// Run ESLint on save</span>\n      <span class=\"hljs-keyword\">if</span> (ctx.isDev &amp;&amp; ctx.isClient) {\n        config.module.rules.push({\n          <span class=\"hljs-attr\">enforce</span>: <span class=\"hljs-string\">\"pre\"</span>,\n          <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(js|vue)$/</span>,\n          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">\"eslint-loader\"</span>,\n          <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/(node_modules)/</span>\n        })\n      }\n    }\n  }</code></pre><div class=\"Alert Alert--orange\">\n\n<p>One best practice is to add also <code>&quot;precommit&quot;: &quot;npm run lint&quot;</code> in your package.json to lint your code automatically before commiting your code.</p>\n</div>\n","docLink":"https://github.com/nuxt/docs/blob/master/en/guide/development-tools.md"}]